{"version":3,"sources":["webpack:///./src/pages/api/handleUndefinedResponsesMiddleware.tsx"],"names":["HandleUndefinedResponsesMiddleware","version","label"],"mappings":"2FAAA,mGAMe,SAASA,IACtB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,uCACA,6DAEF,YAAC,IAAD,oEACA,YAAC,IAAD,CAAeC,QAAQ,UACvB,YAAC,IAAD,6KAIA,YAAC,IAAD,KACE,iKAIA,wQAGE,YAAC,IAAD,mCAHF,8BAMA,kTAKA,uHAEF,YAAC,IAAD,KACE,YAAC,IAAD,CAASC,MAAM,qCAAf,yOAOA,YAAC,IAAD,CAASA,MAAM,8CAAf,iNAIA,YAAC,IAAD,CAASA,MAAM,gCAAf,gNAMA,YAAC,IAAD,CAASA,MAAM,oCAAf,wPAOA,YAAC,IAAD,CAASA,MAAM,6BAAf","file":"component---src-pages-api-handle-undefined-responses-middleware-tsx-598db6f76450acd69223.js","sourcesContent":["import React from 'react'\nimport { Example, Examples, Purpose, AvailableFrom, Usage } from '../../components/api-components'\nimport Container from '../../components/Container'\nimport Page from '../../components/Page'\nimport IndexLayout from '../../layouts'\n\nexport default function HandleUndefinedResponsesMiddleware() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>API Reference</h1>\n          <h2>handleUndefinedResponsesMiddleware</h2>\n        </Container>\n        <Example>{`import {handleUndefinedResponsesMiddleware} from 'papupata'`}</Example>\n        <AvailableFrom version=\"1.5.0\" />\n        <Purpose>\n          Middleware that changes how papupata deals with undefined responses, automatically setting up response code 204 (if not otherwise\n          specified) and sending a response.\n        </Purpose>\n        <Usage>\n          <p>\n            By default papupata assumes that if your route implementation returns undefined, it takes the responsibilities for sending the\n            response.\n          </p>\n          <p>\n            This if often not the case, though. You might have APIs that do things but do not return anything, in which case it makes sense\n            for the response to be undefined or void. But what it means by default is that you have either do something like\n            <Example>{`res.status(204); res.end()`}</Example>\n            or return an empty string.\n          </p>\n          <p>\n            This middleware changes things in two ways; one: if headers have not been sent by the time the route implementation returns\n            undefined, an empty response is automatically sent. Also, in that case, if the response status code has not been explicitly set,\n            it becomes 204 (no content).\n          </p>\n          <p>The behaviour of this middleware might become the default mode of operation for papupata 2.0.</p>\n        </Usage>\n        <Examples>\n          <Example label=\"Enabling middleware for all roues\">{`\n                const API = new APIDeclaration()\n                API.configure({\n                  // other options\n                  inherentMiddleware: [handleUndefinedResponsesMiddleware]\n                })\n            `}</Example>\n          <Example label=\"Enabling the middleware for a single route\">{`\n                const api = API.declareGetAPI('/test').response<string>()\n                api.implementWithPapupataMiddleware([handleUndefinedResponsesMiddleware], () => skipHandlingRoute)\n            `}</Example>\n          <Example label=\"Expected effect: simple case\">{`\n            api.implement(async () => {\n              await doStuff()\n            })\n            // Without middleware there is never a response; with the middleware the response is a 204\n          `}</Example>\n          <Example label=\"Expected effect: explicit status\">{`\n            api.implement(async (_req, res) => {\n              res.status(500)\n              await doStuff()\n            })\n            // Without middleware there is never a response; with the middleware the response is a 500\n          `}</Example>\n          <Example label=\"Expected effect: redirect\">{`\n            api.implement(async (_req, res) => {\n              res.redirect('/')\n            })\n            // Works with and without middleware\n          `}</Example>\n        </Examples>\n      </Page>\n    </IndexLayout>\n  )\n}\n"],"sourceRoot":""}