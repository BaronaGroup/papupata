{"version":3,"sources":["webpack:///./src/pages/api/IncompleteAPIDeclaration/response.tsx","webpack:///./src/components/links.tsx"],"names":["Response","name","dataType","label","IncompleteApiDeclarationLink","to","DeclaredAPILink"],"mappings":"2FAAA,uGAMe,SAASA,IACtB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,uCACA,wDACA,0CAEF,YAAC,IAAD,sFACA,YAAC,IAAD,KACE,2EACA,oaAOF,YAAC,IAAD,KACE,YAAC,IAAD,CAAWC,KAAK,iBAAiBC,SAAS,aAA1C,iDAGA,YAAC,IAAD,CAAWD,KAAK,uBAAuBC,SAAS,aAAhD,wFAIF,YAAC,IAAD,KACE,YAAC,IAAD,OAEF,YAAC,IAAD,KACE,sBACE,6IACA,6IAGJ,YAAC,IAAD,KACE,YAAC,IAAD,CAASC,MAAM,yBAAf,mNAQA,YAAC,IAAD,CAASA,MAAM,qCAAf,gHAOA,YAAC,IAAD,CAASA,MAAM,iCAAf,2FAMA,YAAC,IAAD,CAASA,MAAM,2CAAf,0OAQA,YAAC,IAAD,CAASA,MAAM,qCAAf,uJAOA,YAAC,IAAD,CAASA,MAAM,iCAAf,mH,iCC/EV,4FAGO,SAASC,IACd,OAAO,YAAC,IAAD,CAAMC,GAAG,iCAAT,4BAGF,SAASC,IACd,OAAO,YAAC,IAAD,CAAMD,GAAG,oBAAT","file":"component---src-pages-api-incomplete-api-declaration-response-tsx-fb6dd7571ba19f644a22.js","sourcesContent":["import IndexLayout from '../../../layouts'\r\nimport Page from '../../../components/Page'\r\nimport Container from '../../../components/Container'\r\nimport { Purpose, Usage, Parameter, Parameters, MethodReturnType, Examples, Example, Caveats } from '../../../components/api-components'\r\nimport { DeclaredAPILink } from '../../../components/links'\r\n\r\nexport default function Response() {\r\n  return (\r\n    <IndexLayout>\r\n      <Page>\r\n        <Container>\r\n          <h1>API Reference</h1>\r\n          <h2>class IncompleteAPIDeclaration</h2>\r\n          <h3>method response</h3>\r\n        </Container>\r\n        <Purpose>Declares the response type or types for an API and concludes the declaration.</Purpose>\r\n        <Usage>\r\n          <p>The response type is declared as a type parameter.</p>\r\n          <p>\r\n            In some cases you might be in a situation where the types returned from the implementation don't quite match what clients\r\n            receive. An example of this would be with dates -- you could have a Date object on the server, but when it gets to the browser\r\n            it's just a string. To deal with this another type parameter exists, allowing you to specify another type to be returned from\r\n            the implementation.\r\n          </p>\r\n        </Usage>\r\n        <Parameters>\r\n          <Parameter name=\"<ResponseType>\" dataType=\"Interface\">\r\n            The response type as seen on the client side.\r\n          </Parameter>\r\n          <Parameter name=\"<ServerResponseType>\" dataType=\"Interface\">\r\n            The response type as seen on the server side. Default to the value of ResponseType.\r\n          </Parameter>\r\n        </Parameters>\r\n        <MethodReturnType>\r\n          <DeclaredAPILink />\r\n        </MethodReturnType>\r\n        <Caveats>\r\n          <ul>\r\n            <li>There is no client side validation for the data types. Only typescript itself validates the response on server side</li>\r\n            <li>It's up to the developer to ensure that the ResponseType is really resulting from returning a ServerResponseType.</li>\r\n          </ul>\r\n        </Caveats>\r\n        <Examples>\r\n          <Example label=\"Example 1 Declaration\">\r\n            {`\r\n            import { APIDeclaration } from 'papupata'\r\n            const api = new APIDeclaration()\r\n            const myAPI = api.declarePostAPI('/do-stuff')\r\n              .response<string>()\r\n          `}\r\n          </Example>\r\n          <Example label=\"Example 1 Usage in implementation\">\r\n            {`\r\n            myAPI.implement(req => {\r\n              return \"Hello\"\r\n            })            \r\n          `}\r\n          </Example>\r\n          <Example label=\"Example 1 Usage in invocation\">\r\n            {`\r\n            await myAPI({}) // Returns a promise that resolves to \"Hello\"\r\n          `}\r\n          </Example>\r\n\r\n          <Example label=\"Example 2, differing types; Declaration\">\r\n            {`\r\n            import { APIDeclaration } from 'papupata'\r\n            const api = new APIDeclaration()\r\n            const myAPI = api.declarePostAPI('/do-stuff')\r\n              .response<{date: string}, {date: Date}}>()\r\n          `}\r\n          </Example>\r\n          <Example label=\"Example 2 Usage in implementation\">\r\n            {`\r\n            myAPI.implement(req => {\r\n              return { date: new Date('2019-01-01T12:12:12.000Z') }\r\n            })            \r\n          `}\r\n          </Example>\r\n          <Example label=\"Example 2 Usage in invocation\">\r\n            {`\r\n            await myAPI({}) // Returns a promise that resolves to '2019-01-01T12:12:12.000Z'\r\n          `}\r\n          </Example>\r\n        </Examples>\r\n      </Page>\r\n    </IndexLayout>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nexport function IncompleteApiDeclarationLink() {\r\n  return <Link to=\"/api/IncompleteApiDeclaration\">IncompleteApiDeclaration</Link>\r\n}\r\n\r\nexport function DeclaredAPILink() {\r\n  return <Link to=\"/api/DeclaredAPI\">DeclaredAPI</Link>\r\n}\r\n"],"sourceRoot":""}