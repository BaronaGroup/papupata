{"version":3,"sources":["webpack:///./src/pages/guides/client/calling.tsx","webpack:///./src/components/guides.tsx","webpack:///./node_modules/core-js/modules/es6.string.anchor.js"],"names":["IndexPage","content","heading","anchor","to","Overview","children","Level0","styled","h4","Level1","h5","GuideContent","map","child","style","marginLeft","level","key","href","Heading","id","FixedFont","span","createHTML","name","this"],"mappings":"2FAAA,8EAiLeA,UAxKG,kBAChB,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,6CACA,YAAC,IAAD,sLAIA,YAAC,IAAD,CACEC,QAAS,CACP,CACEC,QAAS,gBACTC,OAAQ,gBACRF,QACE,4BACE,sJAEa,YAAC,IAAD,CAAMG,GAAI,qBAAV,kBAFb,0GAG+C,YAAC,IAAD,CAAMA,GAAI,wBAAV,wBAE/C,kLAIA,YAAC,IAAD,mSAUN,CACEF,QAAS,aACTC,OAAQ,SACRF,QACE,4BACE,4MAIA,2MAIA,gDACA,YAAC,IAAD,2FAGA,yYAMA,iYAMA,qNAIA,YAAC,IAAD,iRAQN,CACEC,QAAS,oBACTC,OAAQ,SACRF,QACE,4BACE,gMAIA,iNAIA,YAAC,IAAD,wFAGA,+FAIN,CACEC,QAAS,UACTC,OAAQ,UACRF,QACE,4BACE,oPAIA,yEACoD,IAClD,YAAC,IAAD,CAAMG,GAAI,wCAAV,2BAFF,wDAKA,YAAC,IAAD,uLAON,CACEF,QAAS,qBACTC,OAAQ,YACRF,QACE,4BACE,uSAKA,oIAC+G,IAC7G,YAAC,IAAD,eAFF,oGAKA,+GAC0F,IACxF,YAAC,IAAD,oBAFF,mCAEoE,YAAC,IAAD,qBAFpE,sBAIA,YAAC,IAAD,4PAQN,CACEC,QAAS,aACTC,OAAQ,aACRF,QACE,4BACE,kKAE0B,YAAC,IAAD,CAAMG,GAAI,0BAAV,WAF1B,KAIA,qEAEE,YAAC,IAAD,CAAMA,GAAG,wBAAT,8BAFF,OAEwE,IACtE,YAAC,IAAD,CAAMA,GAAG,+BAAT,qBAHF,qC,qgBC9JX,SAASC,EAAT,GAAyD,IAArCC,EAAqC,EAArCA,SACzB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,iBACCA,GAYP,IAAMC,EAASC,IAAOC,GAAV,KACNC,EAAQF,IAAOG,GAAT,KAIL,SAASC,EAAT,GAA6D,IAArCX,EAAqC,EAArCA,QAC7B,OACE,uBACE,YAAC,IAAD,KACE,YAAC,IAAD,0BACA,sBACGA,EAAQY,KAAI,SAAAC,GAAK,OAChB,kBAAIC,MAAO,CAAEC,WAAY,IAAMF,EAAMG,OAAS,IAAMC,IAAKJ,EAAMX,QAC7D,iBAAGgB,KAAI,IAAML,EAAMX,QAAWW,EAAMZ,eAK3CD,EAAQY,KAAI,SAAAC,GACX,IAAMM,EAAWN,EAAMG,MAAiBP,EAATH,EAC/B,OACE,YAAC,IAAD,CAASc,GAAIP,EAAMX,OAAQe,IAAKJ,EAAMX,QACpC,YAACiB,EAAD,KAAUN,EAAMZ,SACfY,EAAMb,aAQZ,IAAMqB,EAAYd,IAAOe,KAAV,M,iCCjDtB,EAAQ,IAAR,CAA0B,UAAU,SAAUC,GAC5C,OAAO,SAAgBC,GACrB,OAAOD,EAAWE,KAAM,IAAK,OAAQD","file":"component---src-pages-guides-client-calling-tsx-f78612a80f847c3b9255.js","sourcesContent":["import * as React from 'react'\n\nimport Page from '../../../components/Page'\nimport Container from '../../../components/Container'\nimport IndexLayout from '../../../layouts'\nimport { FixedFont, GuideContent, Overview } from '../../../components/guides'\nimport { Example } from '../../../components/api-components'\nimport { Link } from 'gatsby'\n\nconst IndexPage = () => (\n  <IndexLayout>\n    <Page>\n      <Container>\n        <h1>Guide: calling APIs</h1>\n        <Overview>\n          When you are using someone else's API, this is where the magic happens for you. Making API requests may never have been this\n          simple without a fully featured support library.\n        </Overview>\n        <GuideContent\n          content={[\n            {\n              heading: 'Prerequisites',\n              anchor: 'prerequisites',\n              content: (\n                <>\n                  <p>\n                    Before starting this guide, you need to have an API declaration, with declared APIs. For information on how to get\n                    there, see <Link to={'/guides/declaring'}>Declaring APIs</Link>. You also need to have configured the API declaration to\n                    be able to make requests. This is covered in <Link to={'/guides/client/setup'}>Setting up papupata</Link>\n                  </p>\n                  <p>\n                    For the examples in the guide, the following code is assumed to be present in the scope, and by this time you should be\n                    fully aware of what it all means:\n                  </p>\n                  <Example>{`\n                    const API = new APIDeclaration()\n                    const api = API.declarePatchAPI('/update/:id')\n                      .params(['id'] as const)\n                      .body<{name: string}>()\n                      .response<string>()\n                  `}</Example>\n                </>\n              )\n            },\n            {\n              heading: 'The Basics',\n              anchor: 'basics',\n              content: (\n                <>\n                  <p>\n                    With properly set up papupata the some complexities of dealing with REST APIs are hidden well under the hood. You have a\n                    function, with typed arguments helping you avoid mistakes.\n                  </p>\n                  <p>\n                    Now, if you looked at the API we will be using, you probably noticed that thare are two parameters to the API. A path\n                    parameter, id, and a body that is an object with name in it.\n                  </p>\n                  <p>Now let's call the API:</p>\n                  <Example>{`\n                    await api({ id: 'alpha', name: 'Kevin'})\n                  `}</Example>\n                  <p>\n                    That's all there is to it. You never had to know the actual URL. As you can see, all parameters go into the same object\n                    regardless of where they are meant to end up. Body, query and path parameters, all in one. This does mean that you\n                    cannot have different parameters with the same name in different places, but in most cases that sounds like a bad idea\n                    to begin with.\n                  </p>\n                  <p>\n                    Things work as you would expect: optional parameters are optional, boolean parameters accept booleans and so on. With a\n                    properly declared API you can even pass in dates even though they'll probably becomes strings as they are converted to\n                    JSON. It is fully typed as well, so typescript will complain if you try to do something that contradicts the\n                    declaration.\n                  </p>\n                  <p>\n                    You can of course receive responses from the API. You probably guessed it already, but the promise returned by the call\n                    resolves to that value. The response too, of course, is fully typed.\n                  </p>\n                  <Example>{`\n                    const response = await api({ id: 'alpha', name: 'Kevin'})\n                    // the response from the api is now in response. Typescript knows it's a string, as that's\n                    // how it was declared to be.\n                  `}</Example>\n                </>\n              )\n            },\n            {\n              heading: 'Non-object bodies',\n              anchor: 'bodies',\n              content: (\n                <>\n                  <p>\n                    All in one object sounds like a good idea until it is not. What if you are not passing an object? Even things as mundane\n                    as arrays and strings won't work in that case.\n                  </p>\n                  <p>\n                    This is something papupata is prepared for. Instead of passing everything as a single parameter, you can pass the body\n                    as the first parameter with path and query parameters in another.\n                  </p>\n                  <Example>{`\n                  await api({name: 'Kevin'}, {id: 'alpha'})\n                `}</Example>\n                  <p>Sometimes you might want to do this for the sake of clarity as well.</p>\n                </>\n              )\n            },\n            {\n              heading: 'Options',\n              anchor: 'options',\n              content: (\n                <>\n                  <p>\n                    It is possible to pass options to the code that actually performs the HTTP request for papupata. They are given as an\n                    additional final parameter to the API call, whether or not you gave the body as a separate parameter.\n                  </p>\n                  <p>\n                    The build in adapters do not support options, see{' '}\n                    <Link to={'/guides/client/customRequestAdapters'}>custom request adapters</Link> for more information on how to utilize\n                    the options.\n                  </p>\n                  <Example>{`\n                  await api({name: 'Kevin'}, {id: 'alpha'}, {options: 123})\n                  await api({name: 'Kevin', id: 'alpha'}, {options: 123})\n                  `}</Example>\n                </>\n              )\n            },\n            {\n              heading: 'Bypassing papupata',\n              anchor: 'bypassing',\n              content: (\n                <>\n                  <p>\n                    Sometimes an API can be difficult to call using papupata. A common example would be piping a stream to a request, this\n                    is not something papupata can handle at this time. Sometimes you just want to call an API an unconventional fashion,\n                    bypassing all of papupata's logic.\n                  </p>\n                  <p>\n                    Even in these case you can still take advantage of the API declarations set up for papupata. You can use the{' '}\n                    <FixedFont>getURL</FixedFont> method on an API to get the URL for an API, with its path and possibly query parameters\n                    set up.\n                  </p>\n                  <p>\n                    If you want to create an object that matches the declared body, you can get the type of{' '}\n                    <FixedFont>RequestBody</FixedFont> for the API, and similarly use <FixedFont>ResponseType</FixedFont> for the response.\n                  </p>\n                  <Example>{`\n                    const body: typeof api.BodyType = { name: 'Kevin' }\n                    const url = api.getURL({id: 'alpha'})\n                    const response: typeof api.ResponseType = await myInvoke(url, body)\n                  `}</Example>\n                </>\n              )\n            },\n            {\n              heading: 'Conclusion',\n              anchor: 'conclusion',\n              content: (\n                <>\n                  <p>\n                    Now you know how to call APIs. You might want to know more about how to write tests for client code that utilizes\n                    papupata. For that, see <Link to={'/guides/client/testing'}>testing</Link>.\n                  </p>\n                  <p>\n                    If you want to switch to the server side now,\n                    <Link to=\"/guides/server/setup\">setting up papupata server</Link> and{' '}\n                    <Link to=\"/guides/server/implementing\">implementing APIs</Link> are both fine options.\n                  </p>\n                </>\n              )\n            }\n          ]}\n        />\n      </Container>\n    </Page>\n  </IndexLayout>\n)\n\nexport default IndexPage\n","import React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1= styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map(child => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map(child => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: \"Consolas\", \"Bitstream Vera Sans Mono\", \"Courier New\", Courier, monospace\n`\n","'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n"],"sourceRoot":""}