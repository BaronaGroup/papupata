{"version":3,"sources":["webpack:///./src/pages/api/IncompleteAPIDeclaration/query.tsx","webpack:///./src/components/links.tsx"],"names":["Query","name","dataType","label","IncompleteApiDeclarationLink","to","DeclaredAPILink"],"mappings":"2FAAA,uGAMe,SAASA,IACtB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,uCACA,wDACA,uCAEF,YAAC,IAAD,6DACA,YAAC,IAAD,KACE,uEAEF,YAAC,IAAD,KACE,YAAC,IAAD,CAAWC,KAAK,cAAcC,SAAS,sBACrC,uIACA,2NAMJ,YAAC,IAAD,KACE,YAAC,IAAD,OAEF,YAAC,IAAD,KACE,sBACE,wKAMJ,YAAC,IAAD,KACE,YAAC,IAAD,CAASC,MAAM,eAAf,wQASA,YAAC,IAAD,CAASA,MAAM,uBAAf,qIAMA,YAAC,IAAD,CAASA,MAAM,2BAAf,qN,iCCvDV,4FAGO,SAASC,IACd,OAAO,YAAC,IAAD,CAAMC,GAAG,iCAAT,4BAGF,SAASC,IACd,OAAO,YAAC,IAAD,CAAMD,GAAG,oBAAT","file":"component---src-pages-api-incomplete-api-declaration-query-tsx-76a441c73357b2124594.js","sourcesContent":["import IndexLayout from '../../../layouts'\r\nimport Page from '../../../components/Page'\r\nimport Container from '../../../components/Container'\r\nimport { Purpose, Usage, Parameter, Parameters, MethodReturnType, Examples, Example, Caveats } from '../../../components/api-components'\r\nimport { IncompleteApiDeclarationLink } from '../../../components/links'\r\n\r\nexport default function Query() {\r\n  return (\r\n    <IndexLayout>\r\n      <Page>\r\n        <Container>\r\n          <h1>API Reference</h1>\r\n          <h2>class IncompleteAPIDeclaration</h2>\r\n          <h3>method query</h3>\r\n        </Container>\r\n        <Purpose>Declares required string query parameters for an API</Purpose>\r\n        <Usage>\r\n          <p>Only path params may be defined before query.</p>\r\n        </Usage>\r\n        <Parameters>\r\n          <Parameter name=\"queryParams\" dataType=\"Const string array\">\r\n            <p>Names of the query parameters. See the example below for the recommended way to set up the const string array.</p>\r\n            <p>\r\n              At typescript level a regular string array is not treated as an error at declaration time, but using is NOT correct.\r\n              Unfortunately we have not come up with a way to prevent this kind of usage.\r\n            </p>\r\n          </Parameter>\r\n        </Parameters>\r\n        <MethodReturnType>\r\n          <IncompleteApiDeclarationLink />\r\n        </MethodReturnType>\r\n        <Caveats>\r\n          <ul>\r\n            <li>\r\n              At this time there server side implementation allows undefined values to go through when the API is invoked using means other\r\n              than papupata.\r\n            </li>\r\n          </ul>\r\n        </Caveats>\r\n        <Examples>\r\n          <Example label=\"Declaration\">\r\n            {`\r\n            import { APIDeclaration } from 'papupata'\r\n            const api = new APIDeclaration()\r\n            const myAPI = api.declarePostAPI('/do-stuff')\r\n              .query(['query1', 'query2'] as const)\r\n              .response<string>()\r\n          `}\r\n          </Example>\r\n          <Example label=\"Usage in invocation\">\r\n            {`\r\n            await myAPI({query1: 'abc', query2: 'def'})\r\n            // Invokes URL /do-stuff?query1=abd&query2=def\r\n          `}\r\n          </Example>\r\n          <Example label=\"Usage in implementation\">\r\n            {`\r\n            myAPI.implement(req => {\r\n              const {query1, query2} = req.query\r\n              return query1 + query2 // would return abcdef in the example\r\n            })            \r\n          `}\r\n          </Example>\r\n        </Examples>\r\n      </Page>\r\n    </IndexLayout>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nexport function IncompleteApiDeclarationLink() {\r\n  return <Link to=\"/api/IncompleteApiDeclaration\">IncompleteApiDeclaration</Link>\r\n}\r\n\r\nexport function DeclaredAPILink() {\r\n  return <Link to=\"/api/DeclaredAPI\">DeclaredAPI</Link>\r\n}\r\n"],"sourceRoot":""}