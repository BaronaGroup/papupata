{"version":3,"sources":["webpack:///./src/components/IncludeAvailableFromContext.tsx","webpack:///./src/pages/api/PartiallyDeclaredAPI/optionalQuery.tsx","webpack:///./src/components/api-components.tsx","webpack:///./src/components/links.tsx"],"names":["IncludeAvailableFromContext","React","OptionalQuery","name","dataType","label","Section","styled","section","SectionHeading","h4","SubHeading","h5","ExampleCommonContainer","Purpose","children","AvailableFrom","version","Usage","Parameters","includeAvailableFrom","Provider","value","Parameter","availableFrom","useContext","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","tr","NameColumn","td","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","IncompleteApiDeclarationLink","to","DeclaredAPILink"],"mappings":"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","file":"component---src-pages-api-partially-declared-api-optional-query-tsx-4ceb269d7b81e0938d3a.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import IndexLayout from '../../../layouts'\r\nimport Page from '../../../components/Page'\r\nimport Container from '../../../components/Container'\r\nimport { Purpose, Usage, Parameter, Parameters, MethodReturnType, Examples, Example } from '../../../components/api-components'\r\nimport { IncompleteApiDeclarationLink } from '../../../components/links'\r\n\r\nexport default function OptionalQuery() {\r\n  return (\r\n    <IndexLayout>\r\n      <Page>\r\n        <Container>\r\n          <h1>API Reference</h1>\r\n          <h2>class IncompleteAPIDeclaration</h2>\r\n          <h3>method optionalQuery</h3>\r\n        </Container>\r\n        <Purpose>Declares optional string query parameters for an API</Purpose>\r\n        <Usage>\r\n          <p>Only path params and required string query parameters may be defined before query.</p>\r\n        </Usage>\r\n        <Parameters>\r\n          <Parameter name=\"optionalQueryParams\" dataType=\"Const string array\">\r\n            <p>Names of the query parameters. See the example below for the recommended way to set up the const string array.</p>\r\n            <p>\r\n              At typescript level a regular string array is not treated as an error at declaration time, but using is NOT correct.\r\n              Unfortunately we have not come up with a way to prevent this kind of usage.\r\n            </p>\r\n          </Parameter>\r\n        </Parameters>\r\n        <MethodReturnType>\r\n          <IncompleteApiDeclarationLink />\r\n        </MethodReturnType>\r\n        <Examples>\r\n          <Example label=\"Declaration\">\r\n            {`\r\n            import { APIDeclaration } from 'papupata'\r\n            const api = new APIDeclaration()\r\n            const myAPI = api.declarePostAPI('/do-stuff')\r\n              .optionalQuery(['query1', 'query2'] as const)\r\n              .response<string>()\r\n          `}\r\n          </Example>\r\n          <Example label=\"Usage in invocation\">\r\n            {`\r\n            await myAPI({query1: 'abc'})\r\n            // Invokes URL /do-stuff?query1=abd\r\n          `}\r\n          </Example>\r\n          <Example label=\"Usage in implementation\">\r\n            {`\r\n            myAPI.implement(req => {\r\n              const {query1, query2} = req.query\r\n              return query1 + query2 // would return abcundefined in the example\r\n            })            \r\n          `}\r\n          </Example>\r\n        </Examples>\r\n      </Page>\r\n    </IndexLayout>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport React, { ReactNode } from 'react'\r\nimport { Code } from './Code'\r\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\r\n\r\nexport const Section = styled.section``\r\nexport const SectionHeading = styled.h4``\r\nexport const SubHeading = styled.h5``\r\nexport const ExampleCommonContainer = styled.section`\r\n  padding: 15px 30px;\r\n  background: lightyellow;\r\n`\r\n\r\nexport const Purpose: React.FC = ({ children }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Purpose</SectionHeading>\r\n      {children}\r\n    </Section>\r\n  )\r\n}\r\n\r\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0'\r\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Availability</SectionHeading>\r\n      This functionality is available from papupata version {version} onwards.\r\n    </Section>\r\n  )\r\n}\r\n\r\nexport const Usage: React.FC = ({ children }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Usage</SectionHeading>\r\n      {children}\r\n    </Section>\r\n  )\r\n}\r\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => {\r\n  return (\r\n    <Section>\r\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\r\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\r\n        {children ? (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                {includeAvailableFrom && <th>Introduced in</th>}\r\n              </tr>\r\n            </thead>\r\n            <tbody>{children}</tbody>\r\n          </table>\r\n        ) : (\r\n          <p>There are no parameters.</p>\r\n        )}\r\n      </IncludeAvailableFromContext.Provider>\r\n    </Section>\r\n  )\r\n}\r\n\r\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\r\n  children,\r\n  name,\r\n  dataType,\r\n  availableFrom = '1.0.0'\r\n}) => {\r\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\r\n  return (\r\n    <tr>\r\n      <td>{name}</td>\r\n      <td>{dataType}</td>\r\n      <td>{children}</td>\r\n      {includeAvailableFrom && <td>{availableFrom}</td>}\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport const MethodReturnType: React.FC = ({ children }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Returns</SectionHeading>\r\n      {children}\r\n    </Section>\r\n  )\r\n}\r\n\r\nexport const Caveats: React.FC = ({ children }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Caveats</SectionHeading>\r\n      {children}\r\n    </Section>\r\n  )\r\n}\r\nexport const Examples: React.FC<{ children: any }> = ({ children }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Examples</SectionHeading>\r\n      {children}\r\n    </Section>\r\n  )\r\n}\r\n\r\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => {\r\n  return (\r\n    <>\r\n      {label && <SubHeading>{label}</SubHeading>}\r\n      <Code language={'typescript'}>{children}</Code>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => {\r\n  return (\r\n    <ExampleCommonContainer>\r\n      <SubHeading>Common to examples below:</SubHeading>\r\n      {children}\r\n    </ExampleCommonContainer>\r\n  )\r\n}\r\n\r\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Type parameeters</SectionHeading>\r\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\r\n        <SectionHeading>Parameters</SectionHeading>\r\n        {children ? (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Default value</th>\r\n                <th>Description</th>\r\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\r\n              </tr>\r\n            </thead>\r\n            <tbody>{children}</tbody>\r\n          </table>\r\n        ) : (\r\n          <p>There are no parameters.</p>\r\n        )}\r\n      </IncludeAvailableFromContext.Provider>\r\n    </Section>\r\n  )\r\n}\r\n\r\nconst Row = styled.tr``\r\nconst NameColumn = styled.td``\r\nconst DefaultValueColumn = styled.td``\r\nconst DescriptionColumn = styled.td``\r\nconst AvailableFromColumn = styled.td``\r\n\r\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\r\n  children,\r\n  name,\r\n  defaultValue,\r\n  availableFrom = 'none'\r\n}) => {\r\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\r\n  return (\r\n    <Row>\r\n      <NameColumn>{name}</NameColumn>\r\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\r\n      <DescriptionColumn>{children}</DescriptionColumn>\r\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\r\n    </Row>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nexport function IncompleteApiDeclarationLink() {\r\n  return <Link to=\"/api/PartiallyDeclaredAPI\">PartiallyDeclaredAPI</Link>\r\n}\r\n\r\nexport function DeclaredAPILink() {\r\n  return <Link to=\"/api/DeclaredAPI\">DeclaredAPI</Link>\r\n}\r\n"],"sourceRoot":""}