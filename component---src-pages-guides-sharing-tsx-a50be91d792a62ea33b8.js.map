{"version":3,"sources":["webpack:///./src/pages/guides/sharing.tsx","webpack:///./src/components/guides.tsx","webpack:///./node_modules/core-js/modules/es6.string.anchor.js"],"names":["IndexPage","content","heading","anchor","Overview","children","Level0","styled","h4","Level1","h5","GuideContent","map","child","style","marginLeft","level","key","href","Heading","id","FixedFont","span","createHTML","name","this"],"mappings":"2FAAA,6DAyDeA,UAnDG,kBAChB,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,yDACA,YAAC,IAAD,kHACA,YAAC,IAAD,CACEC,QAAS,CACP,CACEC,QAAS,SACTC,OAAQ,SACRF,QACE,4BACE,+MAIA,6EACA,sBACE,8EACA,iIACA,uFAEF,0UAQN,CACEC,QAAS,aACTC,OAAQ,SACRF,QACE,4BACE,6V,qgBCtCX,SAASG,EAAT,GAAyD,IAArCC,EAAqC,EAArCA,SACzB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,iBACCA,GAYP,IAAMC,EAASC,IAAOC,GAAV,KACNC,EAAQF,IAAOG,GAAT,KAIL,SAASC,EAAT,GAA6D,IAArCV,EAAqC,EAArCA,QAC7B,OACE,uBACE,YAAC,IAAD,KACE,YAAC,IAAD,0BACA,sBACGA,EAAQW,KAAI,SAAAC,GAAK,OAChB,kBAAIC,MAAO,CAAEC,WAAY,IAAMF,EAAMG,OAAS,IAAMC,IAAKJ,EAAMV,QAC7D,iBAAGe,KAAI,IAAML,EAAMV,QAAWU,EAAMX,eAK3CD,EAAQW,KAAI,SAAAC,GACX,IAAMM,EAAWN,EAAMG,MAAiBP,EAATH,EAC/B,OACE,YAAC,IAAD,CAASc,GAAIP,EAAMV,OAAQc,IAAKJ,EAAMV,QACpC,YAACgB,EAAD,KAAUN,EAAMX,SACfW,EAAMZ,aAQZ,IAAMoB,EAAYd,IAAOe,KAAV,M,iCCjDtB,EAAQ,IAAR,CAA0B,UAAU,SAAUC,GAC5C,OAAO,SAAgBC,GACrB,OAAOD,EAAWE,KAAM,IAAK,OAAQD","file":"component---src-pages-guides-sharing-tsx-a50be91d792a62ea33b8.js","sourcesContent":["import * as React from 'react'\nimport Container from '../../components/Container'\nimport { GuideContent, Overview } from '../../components/guides'\nimport Page from '../../components/Page'\nimport IndexLayout from '../../layouts'\n\nconst IndexPage = () => (\n  <IndexLayout>\n    <Page>\n      <Container>\n        <h1>Guide: sharing API declarations</h1>\n        <Overview>Sharing is caring. You care about the users of your API, right? This guide is very much work in progress.</Overview>\n        <GuideContent\n          content={[\n            {\n              heading: 'Basics',\n              anchor: 'basics',\n              content: (\n                <>\n                  <p>\n                    For the time being sharing API declarations is not super convenient. You'll probably want to have your API declarations\n                    either in a separate npm package, or maybe as a git submodule.\n                  </p>\n                  <p>Guidelines for generally available API declarations:</p>\n                  <ul>\n                    <li>Avoid referencing libraries in your API declarations</li>\n                    <li>If you must reference libraries, consider making them peer dependencies to avoid type incompatibilities</li>\n                    <li>Do not reference your own types elsewhere in the file system</li>\n                  </ul>\n                  <p>\n                    You'll want to make sure that the package you create has both typescript d.td definition files as well as the compiled\n                    .js files. Alternatively you can manage with just .ts files, but then the consumers have to find a way to get their\n                    typescript compilation working with the module, which can be tricky.\n                  </p>\n                </>\n              )\n            },\n            {\n              heading: 'The future',\n              anchor: 'future',\n              content: (\n                <>\n                  <p>\n                    Work is being put into creating a tool that extracts the API declarations from your existing code, while rewriting the\n                    types in such a way that they do not refer to any libraries or internal components. Not available yet unfortunately.\n                    Ideally it will solve all of the problems with the current sharing mechanisms.\n                  </p>\n                </>\n              )\n            }\n          ]}\n        />\n      </Container>\n    </Page>\n  </IndexLayout>\n)\n\nexport default IndexPage\n","import React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1= styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map(child => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map(child => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: \"Consolas\", \"Bitstream Vera Sans Mono\", \"Courier New\", Courier, monospace\n`\n","'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n"],"sourceRoot":""}