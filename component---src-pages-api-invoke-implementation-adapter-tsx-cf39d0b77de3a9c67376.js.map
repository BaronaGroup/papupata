{"version":3,"sources":["webpack://papupata-docs/./src/components/IncludeAvailableFromContext.tsx","webpack://papupata-docs/./src/components/VersionVariants.tsx","webpack://papupata-docs/./src/components/api-components.tsx","webpack://papupata-docs/./src/components/guides.tsx","webpack://papupata-docs/./src/components/members-table.tsx","webpack://papupata-docs/./src/pages/api/invokeImplementationAdapter.tsx"],"names":["IncludeAvailableFromContext","React","Container","styled","Note","VersionVariants","variants","isRecommendation","useState","selectedVersion","setSelectedVersion","updateSelectedVersion","useCallback","e","target","value","onChange","Object","keys","filter","variant","version","isApplicable","map","key","Section","SectionHeading","SubHeading","ExampleCommonContainer","Purpose","children","AvailableFrom","Usage","Parameters","includeAvailableFrom","label","Parameter","name","dataType","availableFrom","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","NameColumn","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","Overview","Level0","Level1","GuideContent","content","child","style","marginLeft","level","anchor","href","heading","Heading","id","FixedFont","NameColumnBase","TypeColumn","DataTypeColumn","RequiredColumnStyles","RequiredColumn","includeRequiredColumn","useContext","MemberContext","Error","createContext","context","to","Members","Provider","MethodMember","required","displayName","PropertyMember","link","ExposedTypeMember","Mock","OptionsTable"],"mappings":"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","file":"component---src-pages-api-invoke-implementation-adapter-tsx-cf39d0b77de3a9c67376.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import React, { ReactNode, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nexport type VariantVersion = '*' | SelectableVersion\ntype SelectableVersion = '1.x' | '2.x'\n\ninterface Props {\n  isRecommendation?: boolean\n  variants: {\n    [K in VariantVersion]?: ReactNode\n  }\n}\n\nconst Container = styled.div`\n  border-left: 4px solid #663399;\n  padding: 5px 0 5px 10px;\n`\n\nconst Note = styled.div`\n  display: inline-block;\n  margin-left: 10px;\n  font-size: 0.9em;\n`\n\nexport default function VersionVariants({ variants, isRecommendation }: Props) {\n  const [selectedVersion, setSelectedVersion] = useState<SelectableVersion>('2.x')\n  const updateSelectedVersion = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedVersion(e.target.value as any)\n  }, [])\n\n  return (\n    <Container>\n      <select value={selectedVersion} onChange={updateSelectedVersion}>\n        <option value=\"1.x\">Papupata 1.x</option>\n        <option value=\"2.x\">Papupata 2.x</option>\n      </select>\n      {isRecommendation && <Note>Older styles are still supported in later versions, just not preferred.</Note>}\n      {(Object.keys(variants) as VariantVersion[])\n        .filter((variant) => isApplicable(selectedVersion, variant))\n        .map((variant) => (\n          <div key={variant}>{variants[variant]}</div>\n        ))}\n    </Container>\n  )\n}\n\nfunction isApplicable(version: SelectableVersion, variant: VariantVersion) {\n  if (variant === '*') return true\n  return variant === version\n}\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n\nexport const Usage: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Caveats: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Examples: React.FC<{ children: any }> = ({ children }) => (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1 = styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map((child) => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map((child) => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: 'Consolas', 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace;\n`\n","import { Section, SectionHeading } from './api-components'\nimport React, { createContext, ReactNode, useContext } from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nconst Row = styled.tr``\nconst NameColumnBase = styled.td``\nconst TypeColumn = styled.td``\nconst DataTypeColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst RequiredColumnStyles = styled.td``\nconst AvailableFromColumn = styled.td``\n\nfunction RequiredColumn({ children }: { children: ReactNode }) {\n  const { includeRequiredColumn } = useContext(MemberContext)\n  if (!includeRequiredColumn && children) throw new Error('Being asked to show required cell, yet it does not exist')\n  return includeRequiredColumn ? <RequiredColumnStyles>{children}</RequiredColumnStyles> : null\n}\n\nconst MemberContext = createContext({ context: '', includeRequiredColumn: false })\n\nconst NameColumn: React.FC<{ name: ReactNode }> = ({ name, children }) => {\n  const { context } = useContext(MemberContext)\n  return (\n    <NameColumnBase>\n      <Link to={`/api/${context}/${name}`}>{children || name}</Link>\n    </NameColumnBase>\n  )\n}\n\nexport const Members: React.FC<{ context: string; includeRequiredColumn?: boolean; includeAvailableFrom?: boolean }> = ({\n  children,\n  context,\n  includeRequiredColumn,\n  includeAvailableFrom\n}) => (\n    <Section>\n      <MemberContext.Provider value={{ context, includeRequiredColumn: !!includeRequiredColumn }}>\n        <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n          <SectionHeading>Members</SectionHeading>\n          <table>\n            <thead>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Data type/return type</th>\n              <th>Description</th>\n              {includeRequiredColumn && <th>Required</th>}\n              {includeAvailableFrom && <th>Introduced in</th>}\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        </IncludeAvailableFromContext.Provider>\n      </MemberContext.Provider>\n    </Section>\n  )\nexport const MethodMember: React.FC<{ name: string; dataType: any; required?: any; displayName?: any; availableFrom?: string }> = ({\n  children,\n  name,\n  dataType,\n  required,\n  displayName,\n  availableFrom\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn name={name}>{displayName}</NameColumn>\n      <TypeColumn>method</TypeColumn>\n      <DataTypeColumn>{dataType}</DataTypeColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      <RequiredColumn>{required === true ? 'Yes' : required === false ? 'No' : required}</RequiredColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n\nexport const PropertyMember: React.FC<{ name: ReactNode; dataType: any; required?: any; availableFrom?: string; link?: boolean }> = ({\n  children,\n  name,\n  dataType,\n  required,\n  availableFrom,\n  link\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n\n  return (\n    <Row>\n      {link ? <NameColumn name={name}>{name}</NameColumn> : <NameColumnBase>{name}</NameColumnBase>}\n      <TypeColumn>property</TypeColumn>\n      <DataTypeColumn>{dataType}</DataTypeColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      <RequiredColumn>{required === true ? 'Yes' : required === false ? 'No' : required}</RequiredColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n\nexport const ExposedTypeMember: React.FC<{ name: string }> = ({ children, name }) => (\n    <Row>\n      <NameColumnBase>{name}</NameColumnBase>\n      <TypeColumn>property</TypeColumn>\n      <DataTypeColumn>n/a</DataTypeColumn>\n      <DescriptionColumn>{children}. Type type itself must be accessed using the typeof operator.</DescriptionColumn>\n    </Row>\n  )\n","import '../../prepare'\nimport * as React from 'react'\nimport { AvailableFrom, Example, Examples, MethodReturnType, Parameter, Parameters, Purpose, Usage } from '../../components/api-components'\nimport Container from '../../components/Container'\nimport { FixedFont } from '../../components/guides'\nimport { Members, MethodMember, PropertyMember } from '../../components/members-table'\nimport Page from '../../components/Page'\nimport VersionVariants from '../../components/VersionVariants'\nimport IndexLayout from '../../layouts'\n\nexport default function Mock() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>API Reference</h1>\n          <h2>module invokeImplementationAdapter</h2>\n          <h3>Default export createInvokeImplementationAdapter</h3>\n        </Container>\n        <Purpose>This module allows you to use invoke implemented APIs with no express server. This is primarily used for testing.</Purpose>\n        <AvailableFrom version={'1.5.0'} />\n        <Usage>\n          <VersionVariants\n            variants={{\n              '1.x': (\n                <Example>{`\n                  import createInvokeImplementationAdapter from 'papupata/dist/main/invokeImplementationAdapter'\n                `}</Example>\n              ),\n              '2.x': (\n                <Example>{`\n                  import createInvokeImplementationAdapter from 'papupata/adapters/invokeImplementation'\n                `}</Example>\n              )\n            }}\n          />\n\n          <p>\n            Call the function with any options you wish and use the returned value as the <FixedFont>requestAdapter</FixedFont> of the\n            APIDeclaration. As always, a base url needs to be set up to make calls, but its value is ultimately irrelevant when using this\n            adapter.\n          </p>\n        </Usage>\n        <Parameters>\n          <Parameter name=\"options\" dataType=\"Object?\">\n            <OptionsTable />\n          </Parameter>\n        </Parameters>\n        <MethodReturnType>Papupata MakeRequestAdapter</MethodReturnType>\n        <Examples>\n          <VersionVariants\n            variants={{\n              '1.x': (\n                <Example>\n                  {`\n                    import { APIDeclaration } from 'papupata'\n                    import createInvokeImplementationAdapter from 'papupata/dist/main/invokeImplementationAdapter'\n                    import express from 'express'\n\n                    const app = express()\n                    const request = supertest(app)\n                    const API = new APIDeclaration()\n                    API.configure({\n                      app,\n                      baseURL: '',\n                      makeRequest: createInvokeImplementationAdapter()\n                    })\n                  `}\n                </Example>\n              ),\n              '2.x': (\n                <Example>\n                  {`\n                    import { APIDeclaration } from 'papupata'\n                    import createInvokeImplementationAdapter from 'papupata/adapters/invokeImplementation'\n                    import express from 'express'\n\n                    const app = express()\n                    const request = supertest(app)\n                    const API = new APIDeclaration()\n                    API.configure({\n                      app,\n                      baseURL: '',\n                      requestAdapter: createInvokeImplementationAdapter()\n                    })\n                  `}\n                </Example>\n              )\n            }}\n          />\n        </Examples>\n      </Page>\n    </IndexLayout>\n  )\n}\n\nexport function OptionsTable() {\n  return (\n    <Members context=\"options\" includeRequiredColumn={true}>\n      <MethodMember name=\"createRequest\" dataType=\"(requestBase) => Request\" required={false}>\n        <p>\n          This function is used to create the request passed to the API as if it was the express request. Its sole parameter is a very\n          minimal version of the request, which you may use as a template.\n        </p>\n        <p>This method can be used to add any necessary fields to the request.</p>\n        <Example>{`\n           const createRequest = base => ({...base, headers: { 'content-type': 'text/html' }})\n       `}</Example>\n      </MethodMember>\n      <MethodMember name=\"createResponse\" dataType=\"(responseBase) => Response\" required={false}>\n        <p>\n          This function is used to create the response passed to the API as if it was the express response. Its sole parameter a wrapper\n          papupata uses to handle the response, which can be extended with other properties and methods as necessary.\n        </p>\n        <Example>{`\n           const createResponse = base => ({...base, myField: true})\n       `}</Example>\n      </MethodMember>\n      <MethodMember name=\"assertResponse\" dataType=\"(response) => void\" required={false}>\n        <p>\n          This function is called once the response is complete. It is passed a mock express response, allowing for making assertions to\n          whatever it may contain.\n        </p>\n        <Example>{`\n           const assertResponse = res => expect(res.statusCode).toEqual(400)\n       `}</Example>\n      </MethodMember>\n      <PropertyMember name=\"withMiddleware\" dataType=\"boolean\" required={false}>\n        <p>By default, and if explicitly set to false only the API implementation is called and all middleware is ignored.</p>\n        <p>If set to true, any express and papupata middleware on the route is run as normal for the requests.</p>\n      </PropertyMember>\n    </Members>\n  )\n}\n"],"sourceRoot":""}