{"version":3,"sources":["webpack:///./src/pages/concepts.tsx","webpack:///./src/components/guides.tsx","webpack:///./node_modules/core-js/modules/es6.string.anchor.js"],"names":["Concept","children","label","ConceptsPage","href","Overview","Level0","styled","h4","Level1","h5","GuideContent","content","map","child","style","marginLeft","level","key","anchor","heading","Heading","id","FixedFont","span","createHTML","name","this"],"mappings":"2FAAA,oEAOMA,EAA2E,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC5F,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KAAiBA,GACjB,uBAAMD,KA4DGE,UAvDM,kBACnB,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,4CACA,wGACA,YAACH,EAAD,CAASE,MAAM,OAAf,qBACA,YAACF,EAAD,CAASE,MAAM,mBACb,qHACA,4BACM,YAAC,IAAD,uBADN,oGAKF,YAACF,EAAD,CAASE,MAAM,cAAf,wKAIA,YAACF,EAAD,CAASE,MAAM,yBAAf,gFACA,YAACF,EAAD,CAASE,MAAM,qBAAf,yJAIA,YAACF,EAAD,CAASE,MAAM,UAAf,8MAIA,YAACF,EAAD,CAASE,MAAM,UAAf,2EACA,YAACF,EAAD,CAASE,MAAM,WAAf,8EAEA,YAACF,EAAD,CAASE,MAAM,WAAf,0GAGA,YAACF,EAAD,CAASE,MAAM,WAAf,uDACsD,iBAAGE,KAAK,0BAAR,0BADtD,oGAIA,YAACJ,EAAD,CAASE,MAAM,yBAAf,4FAGA,YAACF,EAAD,CAASE,MAAM,kBACb,iFACA,YAAC,IAAD,gFAGA,4BACM,YAAC,IAAD,YADN,8G,qgBCzDH,SAASG,EAAT,GAAyD,IAArCJ,EAAqC,EAArCA,SACzB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,iBACCA,GAYP,IAAMK,EAASC,IAAOC,GAAV,KACNC,EAAQF,IAAOG,GAAT,KAIL,SAASC,EAAT,GAA6D,IAArCC,EAAqC,EAArCA,QAC7B,OACE,uBACE,YAAC,IAAD,KACE,YAAC,IAAD,0BACA,sBACGA,EAAQC,KAAI,SAAAC,GAAK,OAChB,kBAAIC,MAAO,CAAEC,WAAY,IAAMF,EAAMG,OAAS,IAAMC,IAAKJ,EAAMK,QAC7D,iBAAGf,KAAI,IAAMU,EAAMK,QAAWL,EAAMM,eAK3CR,EAAQC,KAAI,SAAAC,GACX,IAAMO,EAAWP,EAAMG,MAAiBR,EAATH,EAC/B,OACE,YAAC,IAAD,CAASgB,GAAIR,EAAMK,OAAQD,IAAKJ,EAAMK,QACpC,YAACE,EAAD,KAAUP,EAAMM,SACfN,EAAMF,aAQZ,IAAMW,EAAYhB,IAAOiB,KAAV,M,iCCjDtB,EAAQ,IAAR,CAA0B,UAAU,SAAUC,GAC5C,OAAO,SAAgBC,GACrB,OAAOD,EAAWE,KAAM,IAAK,OAAQD","file":"component---src-pages-concepts-tsx-520a90f68d1e014cd4e0.js","sourcesContent":["import * as React from 'react'\r\nimport { Example, Section, SectionHeading } from '../components/api-components'\r\nimport Container from '../components/Container'\r\nimport { FixedFont } from '../components/guides'\r\nimport Page from '../components/Page'\r\nimport IndexLayout from '../layouts'\r\n\r\nconst Concept: React.FC<{ children: React.ReactNode; label: React.ReactNode }> = ({ children, label }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>{label}</SectionHeading>\r\n      <div>{children}</div>\r\n    </Section>\r\n  )\r\n}\r\n\r\nconst ConceptsPage = () => (\r\n  <IndexLayout>\r\n    <Page>\r\n      <Container>\r\n        <h1>Concepts and terms</h1>\r\n        <p>This document covers terminology used throughout the rest of the documentation.</p>\r\n        <Concept label=\"API\">An HTTP endpoint.</Concept>\r\n        <Concept label=\"API Declaration\">\r\n          <p>An API declaration describes an HTTP endpoint, along with its payload and expected response.</p>\r\n          <p>\r\n            The <FixedFont>APIDeclaration</FixedFont> class in papupata allows for declaring APIs on the same host so that they share\r\n            configuration.\r\n          </p>\r\n        </Concept>\r\n        <Concept label=\"Middleware\">\r\n          One or more layers of code between and HTTP server and the business logic. Typically used for things like authentication,\r\n          authorization, logging and error handling.\r\n        </Concept>\r\n        <Concept label=\"Calling/invoking APIs\">The act of making an HTTP request, sending a payload and receiving response.</Concept>\r\n        <Concept label=\"Implementing APIs\">\r\n          The act of providing business logic connected to an HTTP server to process the inputs of an API to produce any necessary side\r\n          effects and a response.\r\n        </Concept>\r\n        <Concept label=\"Client\">\r\n          Any party that uses papupata to make HTTP requests. It is not necessarily a browser -- it is not uncommon for node processes to\r\n          make requests to external systems, in which case they are clients as well.\r\n        </Concept>\r\n        <Concept label=\"Server\">A HTTP (or HTTPs) server that forwards requests for papupata to handle.</Concept>\r\n        <Concept label=\"Request\">A call to an API. Initialized from the client and processed on the server.</Concept>\r\n\r\n        <Concept label=\"Mocking\">\r\n          Substituting production code and logic with another, typically simpler one for the purpose of testing.\r\n        </Concept>\r\n        <Concept label=\"express\">\r\n          A node.js library for implementing http server. See <a href=\"https://expressjs.com/\">https://expressjs.com/</a>. At this time\r\n          papupata natively supports only express as the http server for implementing APIs.\r\n        </Concept>\r\n        <Concept label=\"body, query parameter\">\r\n          Parts of an HTTP request. They along with path parameters are the payload for a request.\r\n        </Concept>\r\n        <Concept label=\"path parameter\">\r\n          <p>A parametrized part of the path in URLs. For example, in</p>\r\n          <Example>{`\r\n            API.declareGetAPI('/get/document/:id')/*...*/\r\n          `}</Example>\r\n          <p>\r\n            the <FixedFont>:id</FixedFont> signifies a path parameter, and is replaced with the value for the parameter when invoking the\r\n            API.\r\n          </p>\r\n        </Concept>\r\n      </Container>\r\n    </Page>\r\n  </IndexLayout>\r\n)\r\n\r\nexport default ConceptsPage\r\n","import React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1= styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map(child => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map(child => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: \"Consolas\", \"Bitstream Vera Sans Mono\", \"Courier New\", Courier, monospace\n`\n","'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n"],"sourceRoot":""}