{"version":3,"sources":["webpack:///./src/components/IncludeAvailableFromContext.tsx","webpack:///./src/pages/api/PartiallyDeclaredAPI/optionalQuery.tsx","webpack:///./src/components/TypeMappingLink.tsx","webpack:///./src/components/api-components.tsx","webpack:///./src/components/VersionVariants.tsx","webpack:///./src/components/links.tsx"],"names":["IncludeAvailableFromContext","React","OptionalQuery","isRecommendation","variants","name","dataType","label","TypeMappingLink","to","Section","styled","section","SectionHeading","h4","SubHeading","h5","ExampleCommonContainer","Purpose","children","AvailableFrom","version","Usage","Parameters","includeAvailableFrom","Provider","value","Parameter","availableFrom","useContext","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","tr","NameColumn","td","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","Container","div","Note","VersionVariants","useState","selectedVersion","setSelectedVersion","updateSelectedVersion","useCallback","e","target","onChange","Object","keys","filter","variant","isApplicable","map","key","IncompleteApiDeclarationLink","DeclaredAPILink"],"mappings":"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","file":"component---src-pages-api-partially-declared-api-optional-query-tsx-7571c180a0aead140151.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import IndexLayout from '../../../layouts'\nimport Page from '../../../components/Page'\nimport Container from '../../../components/Container'\nimport { Purpose, Usage, Parameter, Parameters, MethodReturnType, Examples, Example } from '../../../components/api-components'\nimport { IncompleteApiDeclarationLink } from '../../../components/links'\nimport React from 'react'\nimport VersionVariants from '../../../components/VersionVariants'\nimport TypeMappingLink from '../../../components/TypeMappingLink'\n\nexport default function OptionalQuery() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>API Reference</h1>\n          <h2>class IncompleteAPIDeclaration</h2>\n          <h3>method optionalQuery</h3>\n        </Container>\n        <Purpose>Declares optional string query parameters for an API</Purpose>\n        <Usage>\n          <p>Only path params and required string query parameters may be defined before query.</p>\n        </Usage>\n        <VersionVariants\n          isRecommendation\n          variants={{\n            '1.x': (\n              <>\n                <Parameters>\n                  <Parameter name=\"optionalQueryParams\" dataType=\"Const string array\">\n                    <p>Names of the query parameters. See the example below for the recommended way to set up the const string array.</p>\n                    <p>\n                      At typescript level a regular string array is not treated as an error at declaration time, but using is NOT correct.\n                      Unfortunately we have not come up with a way to prevent this kind of usage.\n                    </p>\n                  </Parameter>\n                </Parameters>\n                <MethodReturnType>\n                  <IncompleteApiDeclarationLink />\n                </MethodReturnType>\n                <Examples>\n                  <Example label=\"Declaration\">\n                    {`\n                      import { APIDeclaration } from 'papupata'\n                      const api = new APIDeclaration()\n                      const myAPI = api.declarePostAPI('/do-stuff')\n                        .optionalQuery(['query1', 'query2'] as const)\n                        .response<string>()\n                    `}\n                  </Example>\n                  <Example label=\"Usage in invocation\">\n                    {`\n                      await myAPI({query1: 'abc'})\n                      // Invokes URL /do-stuff?query1=abc\n                    `}\n                  </Example>\n                  <Example label=\"Usage in implementation\">\n                    {`\n                      myAPI.implement(req => {\n                        const {query1, query2} = req.query\n                        return query1 + query2 // would return abcundefined in the example\n                      })            \n                    `}\n                  </Example>\n                </Examples>\n              </>\n            ),\n            '2.x': (\n              <>\n                <Parameters>\n                  <Parameter name=\"optionalQueryParams\" dataType={<TypeMappingLink />}>\n                    Names and types of the query parameters, as an object. See the examples and the TypeMapping itself for more information.\n                  </Parameter>\n                </Parameters>\n                <MethodReturnType>\n                  <IncompleteApiDeclarationLink />\n                </MethodReturnType>\n                <Examples>\n                  <Example label=\"Declaration\">\n                    {`\n                      import { APIDeclaration } from 'papupata'\n                      const api = new APIDeclaration()\n                      const myAPI = api.declarePostAPI('/do-stuff')\n                        .query({ query1: String, query2: Number })\n                        .response<string>()\n                    `}\n                  </Example>\n                  <Example label=\"Usage in invocation\">\n                    {`\n                      await myAPI({query1: 'abc})\n                      // Invokes URL /do-stuff?query1=abc\n                    `}\n                  </Example>\n                  <Example label=\"Usage in implementation\">\n                    {`\n                      myAPI.implement(req => {\n                        const {query1, query2} = req.query\n                        return query1 + query2 // would return abcundefined\n                      })            \n                  `}\n                  </Example>\n                </Examples>\n              </>\n            )\n          }}\n        />\n      </Page>\n    </IndexLayout>\n  )\n}\n","import { Link } from \"gatsby\";\nimport React from \"react\";\n\nexport default function TypeMappingLink() {\n  return <Link to=\"/api/PartiallyDeclaredAPI/TypeMapping\">TypeMapping</Link>\n}\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => {\n  return (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n}\n\nexport const Usage: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\n}\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => {\n  return (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n}\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport const Caveats: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\n}\nexport const Examples: React.FC<{ children: any }> = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => {\n  return (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n}\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => {\n  return (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n}\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => {\n  return (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n}\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import React, { ReactNode, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nexport type VariantVersion = '*' | SelectableVersion\ntype SelectableVersion = '1.x' | '2.x'\n\ninterface Props {\n  isRecommendation?: boolean\n  variants: {\n    [K in VariantVersion]?: ReactNode\n  }\n}\n\nconst Container = styled.div`\n  border-left: 4px solid #663399;\n  padding: 5px 0 5px 10px;\n`\n\nconst Note = styled.div`\n  display: inline-block;\n  margin-left: 10px;\n  font-size: 0.9em;\n`\n\nexport default function VersionVariants({ variants, isRecommendation }: Props) {\n  const [selectedVersion, setSelectedVersion] = useState<SelectableVersion>('2.x')\n  const updateSelectedVersion = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedVersion(e.target.value as any)\n  }, [])\n\n  return (\n    <Container>\n      <select value={selectedVersion} onChange={updateSelectedVersion}>\n        <option value=\"1.x\">Papupata 1.x</option>\n        <option value=\"2.x\">Papupata 2.x</option>\n      </select>\n      {isRecommendation && <Note>Older styles are still supported in later versions, just not preferred.</Note>}\n      {(Object.keys(variants) as VariantVersion[])\n        .filter((variant) => isApplicable(selectedVersion, variant))\n        .map((variant) => (\n          <div key={variant}>{variants[variant]}</div>\n        ))}\n    </Container>\n  )\n}\n\nfunction isApplicable(version: SelectableVersion, variant: VariantVersion) {\n  if (variant === '*') return true\n  return variant === version\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nexport function IncompleteApiDeclarationLink() {\n  return <Link to=\"/api/PartiallyDeclaredAPI\">PartiallyDeclaredAPI</Link>\n}\n\nexport function DeclaredAPILink() {\n  return <Link to=\"/api/DeclaredAPI\">DeclaredAPI</Link>\n}\n"],"sourceRoot":""}