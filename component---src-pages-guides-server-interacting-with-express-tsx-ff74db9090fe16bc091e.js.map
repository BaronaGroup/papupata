{"version":3,"sources":["webpack://papupata-docs/./src/components/IncludeAvailableFromContext.tsx","webpack://papupata-docs/./src/components/VersionVariants.tsx","webpack://papupata-docs/./src/components/api-components.tsx","webpack://papupata-docs/./src/components/guides.tsx","webpack://papupata-docs/./src/pages/guides/server/interactingWithExpress.tsx"],"names":["IncludeAvailableFromContext","React","Container","styled","Note","VersionVariants","variants","isRecommendation","useState","selectedVersion","setSelectedVersion","updateSelectedVersion","useCallback","e","target","value","onChange","Object","keys","filter","variant","version","isApplicable","map","key","Section","SectionHeading","SubHeading","ExampleCommonContainer","Purpose","children","AvailableFrom","Usage","Parameters","includeAvailableFrom","label","Parameter","name","dataType","availableFrom","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","NameColumn","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","Overview","Level0","Level1","GuideContent","content","child","style","marginLeft","level","anchor","href","heading","Heading","id","FixedFont","to"],"mappings":"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","file":"component---src-pages-guides-server-interacting-with-express-tsx-ff74db9090fe16bc091e.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import React, { ReactNode, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nexport type VariantVersion = '*' | SelectableVersion\ntype SelectableVersion = '1.x' | '2.x'\n\ninterface Props {\n  isRecommendation?: boolean\n  variants: {\n    [K in VariantVersion]?: ReactNode\n  }\n}\n\nconst Container = styled.div`\n  border-left: 4px solid #663399;\n  padding: 5px 0 5px 10px;\n`\n\nconst Note = styled.div`\n  display: inline-block;\n  margin-left: 10px;\n  font-size: 0.9em;\n`\n\nexport default function VersionVariants({ variants, isRecommendation }: Props) {\n  const [selectedVersion, setSelectedVersion] = useState<SelectableVersion>('2.x')\n  const updateSelectedVersion = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedVersion(e.target.value as any)\n  }, [])\n\n  return (\n    <Container>\n      <select value={selectedVersion} onChange={updateSelectedVersion}>\n        <option value=\"1.x\">Papupata 1.x</option>\n        <option value=\"2.x\">Papupata 2.x</option>\n      </select>\n      {isRecommendation && <Note>Older styles are still supported in later versions, just not preferred.</Note>}\n      {(Object.keys(variants) as VariantVersion[])\n        .filter((variant) => isApplicable(selectedVersion, variant))\n        .map((variant) => (\n          <div key={variant}>{variants[variant]}</div>\n        ))}\n    </Container>\n  )\n}\n\nfunction isApplicable(version: SelectableVersion, variant: VariantVersion) {\n  if (variant === '*') return true\n  return variant === version\n}\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n\nexport const Usage: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Caveats: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Examples: React.FC<{ children: any }> = ({ children }) => (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1 = styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map((child) => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map((child) => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: 'Consolas', 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace;\n`\n","import '../../../prepare'\nimport * as React from 'react'\n\nimport Page from '../../../components/Page'\nimport Container from '../../../components/Container'\nimport IndexLayout from '../../../layouts'\nimport { FixedFont, GuideContent, Overview } from '../../../components/guides'\nimport { Example } from '../../../components/api-components'\nimport { Link } from 'gatsby'\nimport VersionVariants from '../../../components/VersionVariants'\n\nconst IndexPage = () => (\n  <IndexLayout>\n    <Page>\n      <Container>\n        <h1>Guide: interacting with express</h1>\n        <Overview>\n          It is not uncommon to want to integrate papupata into an existing express application, whether it is to use the middleware or just\n          using papupata to model the APIs implemented with express.\n        </Overview>\n        <GuideContent\n          content={[\n            {\n              heading: 'The basics',\n              anchor: 'basics',\n              content: (\n                <>\n                  <p>\n                    Papupata connects itself straight to the express app, or you can provide it an express router that you can embed\n                    anywhere you wish in your express application. The timing of things depends on the configuration setting{' '}\n                    <FixedFont>autoImplementAllAPIs</FixedFont>: if it is enabled (default in papupata 2.x), the APIs are added to the app\n                    or router when the configuration happens, if disabled, they are added when they are implemented.\n                  </p>\n                  <p>\n                    Any middleware before and after the attachment point are used as normal -- whether they are on the router or the app.\n                  </p>\n                  <p>\n                    Below are examples that hopefully clarify how the different variants work; before and routerBefore are run before the\n                    implementation for api, after and routerAfter after.\n                  </p>\n                  <p>App, no autoImplementAllAPIs:</p>\n                  <Example>{`\n                    const app = express()\n                    API.configure({app, autoImplementAllAPIs: false})\n                    app.use(before)\n                    api.implement(implementation)\n                    app.use(after)\n                  `}</Example>\n                  <p>Router, no autoImplementAllAPIs:</p>\n                  <Example>{`\n                    import express, {Router} from 'express'\n                    const router = Router()\n                    API.configure({router, autoImplementAllAPIs: false})\n\n                    router.use(routerBefore)\n                    api.implement(implementation)\n                    router.use(routerAfter)\n\n                    const app = express()\n                    app.use(before)\n                    app.use(router)\n                    app.use(after)\n                  `}</Example>\n                  <p>App, using autoImplementAllAPIs:</p>\n                  <Example>{`\n                    const app = express()\n                    app.use(before)\n                    API.configure({app, autoImplementAllAPIs: true})\n                    app.use(after)\n                    api.implement(implementation)\n                  `}</Example>\n                  <p>Router, using autoImplementAllAPIs:</p>\n                  <Example>{`\n                    import express, {Router} from 'express'\n                    const router = Router()\n\n                    router.use(routerBefore)\n                    API.configure({router, autoImplementAllAPIs: true})\n                    router.use(routerAfter)\n\n                    const app = express()\n                    app.use(before)\n                    app.use(router)\n                    app.use(after)\n\n                    api.implement(implementation)\n                  `}</Example>\n                </>\n              )\n            },\n            {\n              heading: 'Where on the app should papupata implementation be?',\n              anchor: 'where',\n              content: (\n                <>\n                  <p>\n                    In an app with both papupata and non-papupata routes it should usually be the case that papupata route implementations\n                    take place before express routes. This helps ensure that the APIs are implemented according to the API declarations,\n                    without a plain express implementation taking over.\n                  </p>\n                  <p>\n                    Things aren't always quite that simple though, since ambiguous routing rules and complicated middleware interactions can\n                    add difficult dependencies on implementation order. See{' '}\n                    <a href=\"#declOnly\">Implementing APIs declared with just express</a> for some ideas on what could be done in this case.\n                  </p>\n                  <p>\n                    How about timing with middleware? If you have middleware that is common with the rest of you application then it makes\n                    sense to just set it all up for all of the routes. Middleware exclusive to papupata routes could be included on its\n                    router, or as papupata middleware. The advantage of using papupata middleware is that it is only used whenever an actual\n                    papupata API is called, not just for being at a specific path. Express-only middleware you'll probably want to add after\n                    the papupata routes so it ends up being bypassed outside of error cases.\n                  </p>\n                </>\n              )\n            },\n            {\n              heading: 'Error handling',\n              anchor: 'errorHandling',\n              content: (\n                <>\n                  Any exceptions thrown in papupata implementations and middleware (unless handled otherwise) are passed as normal to\n                  express error handling middleware.\n                  <Example>{`\n                  api.implement(() => { throw new Error('Oops') })\n\n                  app.use(papupataRouter)\n                  app.use((err, req, res, next) => {\n                    res.status(500)\n                    log.error(err)\n                    res.send('An error happened')\n                  })\n                `}</Example>\n                </>\n              )\n            },\n            {\n              heading: 'Route-specific middleware',\n              anchor: 'routeSpecific',\n              content: (\n                <>\n                  <p>\n                    You can apply route-specific middleware using the <FixedFont>implementWithExpressMiddleware</FixedFont> method.\n                  </p>\n                  <Example>{`\n                    api.implementWithExpressMiddleware([myExpressMiddleware], implementation)\n                  `}</Example>\n                  <p>\n                    If you need to combine express middleware with papupata middleware (which can manipulate the response after the route\n                    implementation), you can convert express middleware to papupata middleware using the{' '}\n                    <FixedFont>convertExpressMiddleware</FixedFont> function.\n                  </p>\n                  <Example>{`\n                    import {convertExpressMiddleware} from 'papupata'\n                    api.implementWithExpressMiddleware(\n                      [myPapupataMiddleware, convertExpressMiddleware(myExpressMiddleware)],\n                      implementation\n                    )\n                  `}</Example>\n                  <p>\n                    See <Link to=\"/guides/server/middleware\">the middleware guide</Link> for more information\n                  </p>\n                </>\n              )\n            },\n            {\n              heading: 'Implementing APIs declared with just express',\n              anchor: 'declonly',\n              content: (\n                <>\n                  <p>\n                    While much of the benefit to using papupata comes from using it to implement APIs, sometimes with existing applications\n                    it can be difficult to convert existing APIs to use it because of complicated middleware or routing considerations.\n                  </p>\n                  <p>\n                    In these situations you can still use papupata to declare the API, and then use your old implementation. At its simplest\n                    you just implement the API you have declared and that is it. If you want to utilize the typescript types, it is also\n                    possible to an extent.\n                  </p>\n                  <VersionVariants\n                    isRecommendation\n                    variants={{\n                      '1.x': (\n                        <Example>{`\n                          const api = API.declareGetAPI('/path/:id')\n                            .params(['id'] as const)\n                            .query(['search'] as const)\n                            .body<string>()\n                            .response<string>()\n\n                          app[api.method](api.path, (req, res, next) => {\n                            const typedRequest = req as typeof api.RequestType\n                            const response: typeof api.ResponseType = await calculateResponse()\n                            res.send(response)\n                          })\n                        `}</Example>\n                      ),\n                      '2.x': (\n                        <Example>{`\n                          const api = API.declareGetAPI('/path/:id')\n                            .params({id: String}})\n                            .query({search: String})\n                            .body<string>()\n                            .response<string>()\n\n                          app[api.method](api.path, (req, res, next) => {\n                            const typedRequest = req as typeof api.RequestType\n                            const response: typeof api.ResponseType = await calculateResponse()\n                            res.send(response)\n                          })\n                    `}</Example>\n                      )\n                    }}\n                  />\n                  <p>\n                    The main caveat is that boolean query parameters are typed as booleans when they are just strings in express. If this is\n                    a problem, you can use a helper type to convert the request to express style using a helper type such as the following:\n                  </p>\n                  <Example>{`\n                    type PapupataToExpressRequest<T> = T extends { query: infer U }\n                      ? Omit<T, 'query'> & { query: { [t in keyof U]: string } }\n                      : T\n\n                    type ExpressRequest = PapupataToExpressRequest<typeof api.RequestType>\n                  `}</Example>\n                  <p>\n                    If you've opted to use the <FixedFont>autoImplementAllAPIs</FixedFont> setting (enabled by default in papupata 2.x), any\n                    routes declared in papupata are set up to return HTTP 501 not implemented, assuming you configure papupata to your\n                    express application. This of course is undesirable when you actually want papupata to ignore the request. If you want\n                    the benefits of the setting anyway, there is a way around it; individual route implementations can return a special\n                    token value <FixedFont>papupata.skipHandlingRoute</FixedFont> to indicate that routing is to continue onwards.\n                  </p>\n                  <Example>{`\n                    import {skipHandlingRoute} from 'papupata'\n\n                    api.implement(() => skipHandlingRoute)\n                    app[api.method](api.path, (req, res, next) => {\n                      // this is where calls to api end up\n                    })\n                    `}</Example>\n                  <p>In papupata 2.x, you can also disable the auto-implementation for specific APIs within their declaration.</p>\n                  <Example>{`\n                    const api = API.declareGetAPI('/path', {}, { disableAutoImplement: true })\n                  `}</Example>\n                  <p>\n                    As another alternative you could implement your express routes before papupata routes, but that could end up with\n                    mismatched API declarations and implementations so doing so is not without issues, either.\n                  </p>\n                </>\n              )\n            }\n          ]}\n        />\n      </Container>\n    </Page>\n  </IndexLayout>\n)\n\nexport default IndexPage\n"],"sourceRoot":""}