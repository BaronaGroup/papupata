{"version":3,"sources":["webpack://papupata-docs/./src/components/IncludeAvailableFromContext.tsx","webpack://papupata-docs/./src/components/TypeMappingLink.tsx","webpack://papupata-docs/./src/components/VersionVariants.tsx","webpack://papupata-docs/./src/components/api-components.tsx","webpack://papupata-docs/./src/components/guides.tsx","webpack://papupata-docs/./src/pages/guides/migrationToV2.tsx"],"names":["IncludeAvailableFromContext","React","TypeMappingLink","to","Container","styled","Note","VersionVariants","variants","isRecommendation","useState","selectedVersion","setSelectedVersion","updateSelectedVersion","useCallback","e","target","value","onChange","Object","keys","filter","variant","version","isApplicable","map","key","Section","SectionHeading","SubHeading","ExampleCommonContainer","Purpose","children","AvailableFrom","Usage","Parameters","includeAvailableFrom","label","Parameter","name","dataType","availableFrom","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","NameColumn","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","Overview","Level0","Level1","GuideContent","content","child","style","marginLeft","level","anchor","href","heading","Heading","id","FixedFont","MigrationToV2"],"mappings":"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","file":"component---src-pages-guides-migration-to-v-2-tsx-41ea77d527ad47845afb.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import { Link } from \"gatsby\";\nimport React from \"react\";\n\nexport default function TypeMappingLink() {\n  return <Link to=\"/api/PartiallyDeclaredAPI/TypeMapping\">TypeMapping</Link>\n}\n","import React, { ReactNode, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nexport type VariantVersion = '*' | SelectableVersion\ntype SelectableVersion = '1.x' | '2.x'\n\ninterface Props {\n  isRecommendation?: boolean\n  variants: {\n    [K in VariantVersion]?: ReactNode\n  }\n}\n\nconst Container = styled.div`\n  border-left: 4px solid #663399;\n  padding: 5px 0 5px 10px;\n`\n\nconst Note = styled.div`\n  display: inline-block;\n  margin-left: 10px;\n  font-size: 0.9em;\n`\n\nexport default function VersionVariants({ variants, isRecommendation }: Props) {\n  const [selectedVersion, setSelectedVersion] = useState<SelectableVersion>('2.x')\n  const updateSelectedVersion = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedVersion(e.target.value as any)\n  }, [])\n\n  return (\n    <Container>\n      <select value={selectedVersion} onChange={updateSelectedVersion}>\n        <option value=\"1.x\">Papupata 1.x</option>\n        <option value=\"2.x\">Papupata 2.x</option>\n      </select>\n      {isRecommendation && <Note>Older styles are still supported in later versions, just not preferred.</Note>}\n      {(Object.keys(variants) as VariantVersion[])\n        .filter((variant) => isApplicable(selectedVersion, variant))\n        .map((variant) => (\n          <div key={variant}>{variants[variant]}</div>\n        ))}\n    </Container>\n  )\n}\n\nfunction isApplicable(version: SelectableVersion, variant: VariantVersion) {\n  if (variant === '*') return true\n  return variant === version\n}\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n\nexport const Usage: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Caveats: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Examples: React.FC<{ children: any }> = ({ children }) => (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1 = styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map((child) => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map((child) => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: 'Consolas', 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace;\n`\n","import '../../prepare'\nimport { Link } from 'gatsby'\nimport * as React from 'react'\nimport { Example } from '../../components/api-components'\nimport Container from '../../components/Container'\nimport { FixedFont, GuideContent, Overview } from '../../components/guides'\nimport Page from '../../components/Page'\nimport TypeMappingLink from '../../components/TypeMappingLink'\nimport VersionVariants from '../../components/VersionVariants'\nimport IndexLayout from '../../layouts'\n\nexport default function MigrationToV2() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>Guide: Migrating to papupata 2.x</h1>\n          <Overview>\n            There are no major incompatibilities from 1.x to 2.x, but there may well be a few things you'll have to change as you upgrade.\n            This guide covers those, as well as giving a brief overview of the new additions.\n          </Overview>\n          <GuideContent\n            content={[\n              {\n                heading: 'Breaking changes',\n                anchor: 'breaking',\n                content: <p>As this is a major version upgrade, there are some breaking changes.</p>\n              },\n              {\n                heading: 'autoImplementAllAPIs default to true',\n                anchor: 'autoImplementAllAPIs',\n                level: 1,\n                content: (\n                  <>\n                    <p>\n                      The default value for the configuration option <FixedFont>autoImplementAllAPIs</FixedFont> is now true. This change\n                      will affect you if you have not used the setting, use papupata on the server and have routes declared with papupata\n                      but not implemented with it.\n                    </p>\n                    <p>\n                      The result is that such APIs will start returning 501, unless express (or something else) handles them before papupata\n                      gets to.\n                    </p>\n                    <p>For a workaround, the easiest solution is to explcitly set the setting to false.</p>\n                    <Example>{`\n                      API.configure({\n                        ...otherOptions,\n                        autoImplementAllAPIs: false,\n                      })\n                      `}</Example>\n                    <p>\n                      You could also update your APIs to either work with this setting, or set the{' '}\n                      <FixedFont>disableAutoImplement</FixedFont> option to true on the affected routes.\n                    </p>\n                  </>\n                )\n              },\n              {\n                heading: 'Imports from withing papupata package have been restructured',\n                anchor: 'deepImports',\n                level: 1,\n                content: (\n                  <>\n                    <p>\n                      In papupata 1.x there were files that were imported from <FixedFont>papupata/dist</FixedFont>; that is no longer\n                      supported and such imports must be updated according as follows.\n                    </p>\n                    <table>\n                      <thead>\n                        <tr>\n                          <th>Old import</th>\n                          <th>New import</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>papupata/dist/main/fetchAdapter</td>\n                          <td>papupata/adapters/fetch</td>\n                        </tr>\n                        <tr>\n                          <td>papupata/dist/main/invokeImplementationAdapter</td>\n                          <td>papupata/adapters/invokeImplementation</td>\n                        </tr>\n                        <tr>\n                          <td>papupata/dist/main/request-promise-adapter</td>\n                          <td>papupata/adapters/requestPromise</td>\n                        </tr>\n                        <tr>\n                          <td>papupata/dist/main/supertestAdapter</td>\n                          <td>papupata/adapters/supertest</td>\n                        </tr>\n                        <tr>\n                          <td>papupata/dist/main/supertestInvoker</td>\n                          <td>papupata/invokers/supertest</td>\n                        </tr>\n                        <tr>\n                          <td>papupata/dist/main/testInvoker</td>\n                          <td>papupata/invokers/test</td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </>\n                )\n              },\n              {\n                heading: 'ES6 support is now required',\n                anchor: 'es6',\n                level: 1,\n                content: (\n                  <>\n                    <p>\n                      Typescript is now configured to use ES6 as its compilation target, as that is required for Error to be subclassed\n                      properly with ES classes.\n                    </p>\n                    <p>\n                      If this turns out to be a problem for you, please submit an issue and we can look in to creating a browser build that\n                      still compiles to ES5.\n                    </p>\n                  </>\n                )\n              },\n              {\n                heading: 'apiUrlParameters on a declared API has had its type changed',\n                anchor: 'apiUrlParameters',\n                level: 1,\n                content: (\n                  <>\n                    <p>\n                      The <Link to=\"/api/DeclaredAPI/apiUrlParameters\">apiUrlParameters property</Link> has had its type changed. It used to\n                      contain arrays of strings, but now it contains <TypeMappingLink /> objects instead. It is not very likely that you've\n                      used this field, and if you have it's most likely in middleware.\n                    </p>\n                    <p>For existing APIs you can get the old format with:</p>\n                    <Example>{`\n                      const oldStyleParameters = {\n                        params: Object.keys(api.apiUrlParameters.params),\n                        query: Object.keys(api.apiUrlParameters.query),\n                        optionalQuery: Object.keys(api.apiUrlParameters.optionalQuery),\n                        boolQuery: Object.keys(api.apiUrlParameters.boolQuery),\n                      }\n                    `}</Example>\n                    <p>\n                      Do note that for APIs that use the new style typed query parameters there will be nothing in boolQuery even if there\n                      are boolean parameters.\n                    </p>\n                  </>\n                )\n              },\n              {\n                heading: 'Presence of required query parameters is verified',\n                anchor: 'requiredQueryParams',\n                level: 1,\n                content: (\n                  <>\n                    <p>\n                      Papupata 1.x allowed you to declare required query parameters, and while the types indicated they were required, no\n                      effort was made to ensure they were actually present. This is no longer the case, and missing required query\n                      parameters are considered a validation error.\n                    </p>\n                    <p>\n                      By default this means that papupata will throw a PapupataValidationError, which can be handle by express middleware,\n                      but there is no way get to the actual route implementation or any middleware with missing query parameters.\n                    </p>\n                    <p>\n                      The only fix is to move all of the optional query parameters from <FixedFont>query</FixedFont> to{' '}\n                      <FixedFont>optionalQuery</FixedFont>, where they should've been all along.\n                    </p>\n                  </>\n                )\n              },\n              {\n                heading: 'Features supported by qs but not by papupata',\n                anchor: 'qsFeatures',\n                level: 1,\n                content: (\n                  <>\n                    <p>\n                      Requests typically have their query parameters parsed by qs, and papupata has just taken whatever values qs has\n                      produced and assumed it's all good. This is no longer the case, and papupata ensures that everything in the request\n                      query conforms to what has been declared in the API declaration (albeit additional fields can still exist).\n                    </p>\n                    <p>\n                      For the most part this should not be a problem, but if you have done some interesting things like passing arrays with\n                      \"as any\" you'll probably have to make some changes.\n                    </p>\n                  </>\n                )\n              },\n              {\n                heading: 'Request adapters can receive undefined as the body',\n                anchor: 'requestAdapterUndefinedBody',\n                level: 1,\n                content: (\n                  <>\n                    <p>\n                      In papupata 1.x request adapters always got a body, which normally was an object. The only situation where it might\n                      not be an object was if you specifically invoked an API that had a non-object body that was passed to papupata.\n                    </p>\n                    <p>\n                      Now, if the body would be an empty object, undefined is passed to request adapters instead. This makes it easier not\n                      to accidentally send empty bodies with GET requests, for example, while still allowing them to be present for DELETE\n                      requests, if required. (while DELETE is not meant to have a body, it is not entirely unknown for it to be used with\n                      one)\n                    </p>\n                    <p>\n                      You might have to update your custom request adapters to deal with the undefined body, with something along the lines\n                      of\n                    </p>\n                    <Example>{`const actualBody = body ?? {}`}</Example>\n                    <p>\n                      As this does easily cause the API implementation not to receive any body even if it has been declared to be an object,\n                      papupata's own middleware makes the body be an empty object if it would otherwise be undefined.\n                    </p>\n                  </>\n                )\n              },\n              {\n                heading: 'Middleware is applied to automatically implemented routes',\n                anchor: '501middleware',\n                level: 1,\n                content: (\n                  <>\n                    <p>\n                      Routes that are are automatically implemented (to return a 501) thanks to <FixedFont>autoImplementAllAPIs</FixedFont>{' '}\n                      being set to true (which is now the default) are subject to any middeware set up on the papupata API declaration\n                      itself.\n                    </p>\n                    <p>\n                      This allows logging middleware etc. to work properly even when the APIs are not implemented, but it does mean that the\n                      middleware is called in situations where it was not before.\n                    </p>\n                  </>\n                )\n              },\n              {\n                heading: 'Deprecated functionality',\n                anchor: 'deprecations',\n                content: <p>Some old features are still supported, but considered deprecated and should be avoided.</p>\n              },\n              {\n                heading: 'Arrays for declaring query and path parameters',\n                anchor: 'arrays',\n                level: 1,\n                content: (\n                  <>\n                    <p>\n                      In papupata 1.x all path and query parameters were declared as const arrays. In 2.x it is now possible, and\n                      recommended that you instead use <TypeMappingLink /> objects to declare the parameters. The main advantages are never\n                      again forgetting the <FixedFont>as const</FixedFont> and being able to use a variety of types for the parameters\n                      instead of just strings.\n                    </p>\n                    <VersionVariants\n                      variants={{\n                        '1.x': (\n                          <Example>\n                            {`\n                            const api = API.declareGetAPI('/path/:id')\n                              .params(['id'] as const)\n                              .query(['query'] as const)\n                              .optionalQuery(['limit', 'startFrom'] as const)\n                              .response<any>()\n                           `}\n                          </Example>\n                        ),\n                        '2.x': (\n                          <Example>\n                            {`\n                            const api = API.declareGetAPI('/path/:id')\n                              .params({ id: Number })\n                              .query({ query: String })\n                              .optionalQuery({ limit: Number, startFrom: Date}})\n                              .response<any>()\n                          `}\n                          </Example>\n                        )\n                      }}\n                    />\n                  </>\n                )\n              },\n              {\n                heading: 'queryBool',\n                anchor: 'queryBool',\n                level: 1,\n                content: (\n                  <>\n                    <p>\n                      Declaring boolean query parameters with queryBool is no longer recommended, instead they should be declared as normal\n                      or optional query parameters with boolean type.\n                    </p>\n                    <VersionVariants\n                      variants={{\n                        '1.x': (\n                          <Example>\n                            {`\n                          const api = API.declareGetAPI('/path')\n                            .queryBool(['myParam'] as const)\n                            .response<any>()\n                           `}\n                          </Example>\n                        ),\n                        '2.x': (\n                          <Example>\n                            {`\n                              const api = API.declareGetAPI('/path')\n                                .query({ myParam: Boolean }})\n                                .response<any>()\n                          `}\n                          </Example>\n                        )\n                      }}\n                    />\n                    <p>\n                      Do however not that this it not a perfect match for the old behavior; in 1.x any values other than the string \"true\"\n                      were treated as false, whereas in 2.x the only permitted values are the string \"true\", \"false\" and an empty string\n                      (which also stands for false). If the parameters is optional, undefined is also valid value but remains undefined\n                      instead of becoming false.\n                    </p>\n                  </>\n                )\n              },\n              {\n                heading: 'Configuration option makeRequest is now requestAdapter',\n                anchor: 'requestAdapter',\n                level: 1,\n                content: (\n                  <p>\n                    In order to be more consistent with the documentation, the configuration option <FixedFont>makeRequest</FixedFont> is\n                    now instead <FixedFont>requestAdapter</FixedFont>. The old name can still be used, however.\n                  </p>\n                )\n              }\n            ]}\n          />\n        </Container>\n      </Page>\n    </IndexLayout>\n  )\n}\n"],"sourceRoot":""}