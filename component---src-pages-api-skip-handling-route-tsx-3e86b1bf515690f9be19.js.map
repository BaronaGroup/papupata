{"version":3,"sources":["webpack:///./src/pages/api/skipHandlingRoute.tsx"],"names":["SkipHandlingRoute","version","label"],"mappings":"2FAAA,mGAMe,SAASA,IACtB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,uCACA,4CAEF,YAAC,IAAD,mDACA,YAAC,IAAD,CAAeC,QAAQ,UACvB,YAAC,IAAD,mJAIA,YAAC,IAAD,KACE,6HACA,qVAKA,6dAOF,YAAC,IAAD,KACE,YAAC,IAAD,CAASC,MAAM,oBAAf,0NAMA,YAAC,IAAD,CAASA,MAAM,kDAAf","file":"component---src-pages-api-skip-handling-route-tsx-3e86b1bf515690f9be19.js","sourcesContent":["import React from 'react'\nimport { Example, Examples, Purpose, AvailableFrom, Usage } from '../../components/api-components'\nimport Container from '../../components/Container'\nimport Page from '../../components/Page'\nimport IndexLayout from '../../layouts'\n\nexport default function SkipHandlingRoute() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>API Reference</h1>\n          <h2>skipHandlingRoute</h2>\n        </Container>\n        <Example>{`import {skipHandlingRoute} from 'papupata'`}</Example>\n        <AvailableFrom version=\"1.5.0\" />\n        <Purpose>\n          A token value a route implementation or papupata middleware can return to have express move on to the other route handlers and\n          middleware.\n        </Purpose>\n        <Usage>\n          <p>Most people will no need this, but there are a few use cases where this functionality can be useful.</p>\n          <p>\n            If routing needs are such, that there can be false positives for the route implementation, then this value can be used to defer\n            the execution to other handlers. A common case would be serving HTML if the client expects it, and only running the API call\n            itself for calls that have, say, Accept header requesting JSON.\n          </p>\n          <p>\n            Another case would be when autoImplementAllAPIs is enabled, but you cannot actually implement all the APIs with papupata.\n            Perhaps you need a pecualiar combination of middleware that make it more difficult, maybe you even want to defer to another\n            papupata router. Or perhaps the route is implemented by a library. In these cases you can implement the route as one that always\n            returns skipHandlingRoute to indicate that other code is responsible for it.\n          </p>\n        </Usage>\n        <Examples>\n          <Example label=\"Conditional skip\">{`\n                api.implement(req => {\n                    if (req.headers.accept.includes('text/html')) return skipHandlingRoute\n                    return processRequest(req)\n                })\n            `}</Example>\n          <Example label=\"Defer execution to non-papupata implementation\">{`\n                const api = API.declareGetAPI('/test').response<string>()\n                api.implement(() => skipHandlingRoute)\n                app.get('/test', (_req, res) => res.send('OK!'))\n            `}</Example>\n        </Examples>\n      </Page>\n    </IndexLayout>\n  )\n}\n"],"sourceRoot":""}