{"version":3,"sources":["webpack:///./src/pages/api/DeclaredAPI/mock.tsx"],"names":["Mock","version","to","name","dataType","label"],"mappings":"2FAAA,6GAgBe,SAASA,IACtB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,uCACA,2CACA,sCAEF,YAAC,IAAD,6EACA,YAAC,IAAD,CAAeC,QAAS,UACxB,YAAC,IAAD,KACE,0KAEwB,YAAC,IAAD,CAAMC,GAAG,6BAAT,YAFxB,sHAKA,qGAC+E,YAAC,IAAD,CAAMA,GAAG,2BAAT,UAAiD,IADhI,kBAEiB,YAAC,IAAD,CAAMA,GAAG,iCAAT,aAFjB,mCAKF,YAAC,IAAD,KACE,YAAC,IAAD,CAAWC,KAAK,YAAYC,SAAS,qBACnC,4JAIA,qHAGJ,YAAC,IAAD,gBACA,YAAC,IAAD,KACE,YAAC,IAAD,CAASC,MAAM,SAAf,sXAcA,YAAC,IAAD,CAASA,MAAM,YAAf","file":"component---src-pages-api-declared-api-mock-tsx-6b6197a6c1d9b01cbd42.js","sourcesContent":["import IndexLayout from '../../../layouts'\r\nimport Page from '../../../components/Page'\r\nimport Container from '../../../components/Container'\r\nimport {\r\n  Purpose,\r\n  Usage,\r\n  Parameter,\r\n  Parameters,\r\n  MethodReturnType,\r\n  Examples,\r\n  Example,\r\n  AvailableFrom\r\n} from '../../../components/api-components'\r\nimport { Link } from 'gatsby'\r\nimport * as React from 'react'\r\n\r\nexport default function Mock() {\r\n  return (\r\n    <IndexLayout>\r\n      <Page>\r\n        <Container>\r\n          <h1>API Reference</h1>\r\n          <h2>class DeclaredAPI</h2>\r\n          <h3>method mock</h3>\r\n        </Container>\r\n        <Purpose>Causes API invocations to be omitted, instead returning a mock value</Purpose>\r\n        <AvailableFrom version={'1.1.0'} />\r\n        <Usage>\r\n          <p>\r\n            This function is meant to help with testing components that use papupata. If you only wish to mock a single invocation, you\r\n            might want to use the <Link to=\"/api/DeclaredAPI/mockOnce\">mockOnce</Link> method instead, as it automatically removes the mock\r\n            implementation as soon as the invocation has been completed.\r\n          </p>\r\n          <p>\r\n            If you wish to restore the API to its normal state after mocking it, use the <Link to=\"/api/DeclaredAPI/unmock\">unmock</Link>{' '}\r\n            method, or the <Link to=\"/api/APIDeclaration/unmockAll\">unmockAll</Link> method of the API declaration\r\n          </p>\r\n        </Usage>\r\n        <Parameters>\r\n          <Parameter name=\"mockValue\" dataType=\"Function or value\">\r\n            <p>\r\n              If a function, that function is invoked when the API is invoked and its return value is returned as the mock response from the\r\n              API.\r\n            </p>\r\n            <p>Otherwise the value given as this parameter is returned as the mock response from the API.</p>\r\n          </Parameter>\r\n        </Parameters>\r\n        <MethodReturnType>nothing</MethodReturnType>\r\n        <Examples>\r\n          <Example label=\"Value\">\r\n            {`\r\n            import { APIDeclaration } from 'papupata'\r\n            const api = new APIDeclaration()\r\n            const myAPI = api.declarePostAPI('/do-stuff/:param')\r\n              .response<string>()\r\n\r\n            myAPI.mock('test')\r\n            \r\n            const value = await myAPI() // value is now \"test\"\r\n            \r\n            myAPI.unmock()\r\n          `}\r\n          </Example>\r\n          <Example label=\"Function\">\r\n            {`\r\n            import { APIDeclaration } from 'papupata'\r\n            const api = new APIDeclaration()\r\n            const myAPI = api.declarePostAPI('/do-stuff/:param')\r\n              .response<string>()\r\n\r\n            myAPI.mock(() => 'test')\r\n            \r\n            const value = await myAPI() // value is now \"test\"\r\n            \r\n            myAPI.unmock()\r\n          `}\r\n          </Example>\r\n        </Examples>\r\n      </Page>\r\n    </IndexLayout>\r\n  )\r\n}\r\n"],"sourceRoot":""}