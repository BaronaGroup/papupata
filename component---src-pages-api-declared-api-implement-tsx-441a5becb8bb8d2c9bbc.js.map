{"version":3,"sources":["webpack:///./src/pages/api/DeclaredAPI/implement.tsx","webpack:///./src/pages/api/DeclaredAPI/implementBase.tsx","webpack:///./src/components/IncludeAvailableFromContext.tsx","webpack:///./src/components/api-components.tsx"],"names":["Implement","fnName","variantPurpose","middlewareParameter","examples","label","ImplementBase","availableFrom","version","name","dataType","IncludeAvailableFromContext","React","Section","styled","section","SectionHeading","h4","SubHeading","h5","ExampleCommonContainer","Purpose","children","AvailableFrom","Usage","Parameters","includeAvailableFrom","Provider","value","Parameter","useContext","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","tr","NameColumn","td","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue"],"mappings":"iGACA,uFAGe,SAASA,IACtB,OACE,YAAC,UAAD,CACEC,OAAO,YACPC,eAAgB,KAChBC,oBAAqB,KACrBC,SACE,YAAC,IAAD,CAASC,MAAM,2BAAf,0M,oCCXR,+GAwBe,SAASC,EAAT,GAAyG,IAAhFC,EAAgF,EAAhFA,cAAeL,EAAiE,EAAjEA,eAAgBC,EAAiD,EAAjDA,oBAAqBF,EAA4B,EAA5BA,OAAQG,EAAoB,EAApBA,SAClG,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,uCACA,2CACA,gCAAYH,IAEbM,GAAiB,YAAC,IAAD,CAAeC,QAASD,IAC1C,YAAC,IAAD,yCAA2CL,GAC3C,YAAC,IAAD,mIAGA,YAAC,IAAD,KACGC,EACD,YAAC,IAAD,CAAWM,KAAK,iBAAiBC,SAAS,YAA1C,6DAEE,YAAC,IAAD,KACE,YAAC,IAAD,CAAWD,KAAK,MAAMC,SAAS,WAA/B,4HAGA,YAAC,IAAD,CAAWD,KAAK,MAAMC,SAAS,YAA/B,mDAIF,YAAC,IAAD,iEACA,sBACE,mGACA,mHACA,2OAON,YAAC,IAAD,gBACA,YAAC,IAAD,KACE,sBACE,gGACA,yGACA,uJAKJ,YAAC,IAAD,KACE,YAAC,IAAD,CAASL,MAAM,eAAf,+UAWCD,EACD,YAAC,IAAD,CAASC,MAAM,uBAAf,6K,oCCpFV,kDAEaM,EAA8BC,iBAAoB,I,4sCCGxD,IAAMC,EAAUC,IAAOC,QAAV,KACPC,EAAiBF,IAAOG,GAAV,KACdC,EAAaJ,IAAOK,GAAV,KACVC,EAAyBN,IAAOC,QAAV,KAKtBM,EAAoB,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SAClC,OACE,YAACT,EAAD,KACE,YAACG,EAAD,gBACCM,IAMMC,EAAgB,SAAC,GAA4C,IAA1Cf,EAA0C,EAA1CA,QAC9B,OACE,YAACK,EAAD,KACE,YAACG,EAAD,qBADF,yDAEyDR,EAFzD,cAOSgB,EAAkB,SAAC,GAAiB,IAAfF,EAAe,EAAfA,SAChC,OACE,YAACT,EAAD,KACE,YAACG,EAAD,cACCM,IAIMG,EAA2E,SAAC,GAA8C,IAA5CH,EAA4C,EAA5CA,SAAUI,EAAkC,EAAlCA,qBAAsBrB,EAAY,EAAZA,MACzH,OACE,YAACQ,EAAD,KACE,YAAC,IAA4Bc,SAA7B,CAAsCC,QAASF,GAC7C,YAACV,EAAD,kBAA2BX,GAAS,KAAKA,GACxCiB,EACC,yBACE,yBACE,sBACE,8BACA,8BACA,qCACCI,GAAwB,yCAG7B,yBAAQJ,IAGV,oDAOGO,EAAsF,SAAC,GAK9F,IAJJP,EAII,EAJJA,SACAb,EAGI,EAHJA,KACAC,EAEI,EAFJA,SAEI,IADJH,qBACI,MADY,QACZ,EACEmB,EAAuBd,IAAMkB,WAAWnB,KAC9C,OACE,sBACE,sBAAKF,GACL,sBAAKC,GACL,sBAAKY,GACJI,GAAwB,sBAAKnB,KAKvBwB,EAA6B,SAAC,GAAiB,IAAfT,EAAe,EAAfA,SAC3C,OACE,YAACT,EAAD,KACE,YAACG,EAAD,gBACCM,IAKMU,EAAoB,SAAC,GAAiB,IAAfV,EAAe,EAAfA,SAClC,OACE,YAACT,EAAD,KACE,YAACG,EAAD,gBACCM,IAIMW,EAAwC,SAAC,GAAiB,IAAfX,EAAe,EAAfA,SACtD,OACE,YAACT,EAAD,KACE,YAACG,EAAD,iBACCM,IAKMY,EAA0D,SAAC,GAAwB,IAAtBZ,EAAsB,EAAtBA,SAAUjB,EAAY,EAAZA,MAClF,OACE,8BACGA,GAAS,YAACa,EAAD,KAAab,GACvB,YAAC,IAAD,CAAM8B,SAAU,cAAeb,KAKxBc,EAA6C,SAAC,GAAiB,IAAfd,EAAe,EAAfA,SAC3D,OACE,YAACF,EAAD,KACE,YAACF,EAAD,kCACCI,IAKMe,EAAoF,SAAC,GAAuC,IAArCf,EAAqC,EAArCA,SAAUI,EAA2B,EAA3BA,qBAC5G,OACE,YAACb,EAAD,KACE,YAACG,EAAD,yBACA,YAAC,IAA4BW,SAA7B,CAAsCC,QAASF,GAC7C,YAACV,EAAD,mBACCM,EACC,yBACE,yBACE,sBACE,8BACA,uCACA,qCACCI,EAAuB,uCAAyB,KAGrD,yBAAQJ,IAGV,oDAOJgB,EAAMxB,IAAOyB,GAAV,KACHC,EAAa1B,IAAO2B,GAAV,KACVC,EAAqB5B,IAAO2B,GAAV,KAClBE,EAAoB7B,IAAO2B,GAAV,KACjBG,EAAsB9B,IAAO2B,GAAV,KAEZI,EAA2F,SAAC,GAKnG,IAJJvB,EAII,EAJJA,SACAb,EAGI,EAHJA,KACAqC,EAEI,EAFJA,aAEI,IADJvC,qBACI,MADY,OACZ,EACEmB,EAAuBd,IAAMkB,WAAWnB,KAC9C,OACE,YAAC2B,EAAD,KACE,YAACE,EAAD,KAAa/B,GACb,YAACiC,EAAD,KAAqBI,GACrB,YAACH,EAAD,KAAoBrB,GACnBI,EAAuB,YAACkB,EAAD,KAAsBrC,GAAuC","file":"component---src-pages-api-declared-api-implement-tsx-441a5becb8bb8d2c9bbc.js","sourcesContent":["\r\nimport ImplementBase from './implementBase'\r\nimport { Example } from '../../../components/api-components'\r\n\r\nexport default function Implement() {\r\n  return (\r\n    <ImplementBase\r\n      fnName=\"implement\"\r\n      variantPurpose={null}\r\n      middlewareParameter={null}\r\n      examples={\r\n        <Example label=\"Usage in implementation\">\r\n          {`\r\nmyAPI.implement((req, res) => {\r\n  const {q} = req.query,\r\n    {param} = req.params,\r\n    {key} = req.body\r\n  res.set('x-my-header', 'Hello')\r\n  return [param, q, key].join()\r\n})            \r\n`}\r\n        </Example>\r\n      }\r\n    />\r\n  )\r\n}\r\n","import IndexLayout from '../../../layouts'\r\nimport Page from '../../../components/Page'\r\nimport Container from '../../../components/Container'\r\nimport {\r\n  Purpose,\r\n  Usage,\r\n  Parameter,\r\n  Parameters,\r\n  MethodReturnType,\r\n  Examples,\r\n  Example,\r\n  Caveats,\r\n  AvailableFrom\r\n} from '../../../components/api-components'\r\nimport { ReactNode } from 'react'\r\n\r\ninterface Params {\r\n  fnName: string\r\n  variantPurpose: ReactNode\r\n  middlewareParameter: ReactNode\r\n  examples: ReactNode\r\n  availableFrom?: '1.5.0'\r\n}\r\n\r\nexport default function ImplementBase({ availableFrom, variantPurpose, middlewareParameter, fnName, examples }: Params) {\r\n  return (\r\n    <IndexLayout>\r\n      <Page>\r\n        <Container>\r\n          <h1>API Reference</h1>\r\n          <h2>class DeclaredAPI</h2>\r\n          <h3>method {fnName}</h3>\r\n        </Container>\r\n        {availableFrom && <AvailableFrom version={availableFrom} />}\r\n        <Purpose>Implements an API using express. {variantPurpose}</Purpose>\r\n        <Usage>\r\n          Instead of calling the methods on an express app or router yourself, you use this function to have papupata do it for you.\r\n        </Usage>\r\n        <Parameters>\r\n          {middlewareParameter}\r\n          <Parameter name=\"implementation\" dataType=\"Function\">\r\n            A function that implements the route. Specified as follows\r\n            <Parameters>\r\n              <Parameter name=\"req\" dataType=\"Request\">\r\n                This is a typed express request -- that is, body, params and query have been replaced with typed versions of themselves.\r\n              </Parameter>\r\n              <Parameter name=\"res\" dataType=\"Response\">\r\n                Express response corresponding to the request.\r\n              </Parameter>\r\n            </Parameters>\r\n            <MethodReturnType>ResponseType, ServerResponseType, or a promise of either</MethodReturnType>\r\n            <ul>\r\n              <li>Do note that the \"next\" parameter typically used in routes is not present</li>\r\n              <li>Anything thrown (includes returned rejected promises) is given to the usual next function</li>\r\n              <li>\r\n                If undefined is returned, nothing is sent automatically. This could at times explain hanging requests. Of course, unless you\r\n                explicitly declared the API to return undefined, you should see type errors, too.\r\n              </li>\r\n            </ul>\r\n          </Parameter>\r\n        </Parameters>\r\n        <MethodReturnType>Nothing</MethodReturnType>\r\n        <Caveats>\r\n          <ul>\r\n            <li>Either application of router must be configured or the function throws</li>\r\n            <li>You can implement an API multiple times, but it is unlikely to do you any good.</li>\r\n            <li>\r\n              There is at this time no way to cleanly implement an API that does not just return its value, and instead, say, streams it.\r\n            </li>\r\n          </ul>\r\n        </Caveats>\r\n        <Examples>\r\n          <Example label=\"Declaration\">\r\n            {`\r\n            import { APIDeclaration } from 'papupata'\r\n            const api = new APIDeclaration()\r\n            const myAPI = api.declarePostAPI('/do-stuff/:param')\r\n              .params(['param'] as const)\r\n              .query(['q'] as const)\r\n              .body({key: string})\r\n              .response<string>()\r\n          `}\r\n          </Example>\r\n          {examples}\r\n          <Example label=\"Usage in invocation\">\r\n            {`\r\n            const response = await myAPI({param: 'abc', q: 'def', key: 'ghi'})            \r\n            // Response in the example will be abc,def,ghi\r\n          `}\r\n          </Example>\r\n        </Examples>\r\n      </Page>\r\n    </IndexLayout>\r\n  )\r\n}\r\n","import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import styled from 'styled-components'\r\nimport React, { ReactNode } from 'react'\r\nimport { Code } from './Code'\r\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\r\n\r\nexport const Section = styled.section``\r\nexport const SectionHeading = styled.h4``\r\nexport const SubHeading = styled.h5``\r\nexport const ExampleCommonContainer = styled.section`\r\n  padding: 15px 30px;\r\n  background: lightyellow;\r\n`\r\n\r\nexport const Purpose: React.FC = ({ children }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Purpose</SectionHeading>\r\n      {children}\r\n    </Section>\r\n  )\r\n}\r\n\r\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0'\r\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Availability</SectionHeading>\r\n      This functionality is available from papupata version {version} onwards.\r\n    </Section>\r\n  )\r\n}\r\n\r\nexport const Usage: React.FC = ({ children }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Usage</SectionHeading>\r\n      {children}\r\n    </Section>\r\n  )\r\n}\r\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => {\r\n  return (\r\n    <Section>\r\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\r\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\r\n        {children ? (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                {includeAvailableFrom && <th>Introduced in</th>}\r\n              </tr>\r\n            </thead>\r\n            <tbody>{children}</tbody>\r\n          </table>\r\n        ) : (\r\n          <p>There are no parameters.</p>\r\n        )}\r\n      </IncludeAvailableFromContext.Provider>\r\n    </Section>\r\n  )\r\n}\r\n\r\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\r\n  children,\r\n  name,\r\n  dataType,\r\n  availableFrom = '1.0.0'\r\n}) => {\r\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\r\n  return (\r\n    <tr>\r\n      <td>{name}</td>\r\n      <td>{dataType}</td>\r\n      <td>{children}</td>\r\n      {includeAvailableFrom && <td>{availableFrom}</td>}\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport const MethodReturnType: React.FC = ({ children }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Returns</SectionHeading>\r\n      {children}\r\n    </Section>\r\n  )\r\n}\r\n\r\nexport const Caveats: React.FC = ({ children }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Caveats</SectionHeading>\r\n      {children}\r\n    </Section>\r\n  )\r\n}\r\nexport const Examples: React.FC<{ children: any }> = ({ children }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Examples</SectionHeading>\r\n      {children}\r\n    </Section>\r\n  )\r\n}\r\n\r\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => {\r\n  return (\r\n    <>\r\n      {label && <SubHeading>{label}</SubHeading>}\r\n      <Code language={'typescript'}>{children}</Code>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => {\r\n  return (\r\n    <ExampleCommonContainer>\r\n      <SubHeading>Common to examples below:</SubHeading>\r\n      {children}\r\n    </ExampleCommonContainer>\r\n  )\r\n}\r\n\r\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => {\r\n  return (\r\n    <Section>\r\n      <SectionHeading>Type parameeters</SectionHeading>\r\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\r\n        <SectionHeading>Parameters</SectionHeading>\r\n        {children ? (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Default value</th>\r\n                <th>Description</th>\r\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\r\n              </tr>\r\n            </thead>\r\n            <tbody>{children}</tbody>\r\n          </table>\r\n        ) : (\r\n          <p>There are no parameters.</p>\r\n        )}\r\n      </IncludeAvailableFromContext.Provider>\r\n    </Section>\r\n  )\r\n}\r\n\r\nconst Row = styled.tr``\r\nconst NameColumn = styled.td``\r\nconst DefaultValueColumn = styled.td``\r\nconst DescriptionColumn = styled.td``\r\nconst AvailableFromColumn = styled.td``\r\n\r\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\r\n  children,\r\n  name,\r\n  defaultValue,\r\n  availableFrom = 'none'\r\n}) => {\r\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\r\n  return (\r\n    <Row>\r\n      <NameColumn>{name}</NameColumn>\r\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\r\n      <DescriptionColumn>{children}</DescriptionColumn>\r\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\r\n    </Row>\r\n  )\r\n}\r\n"],"sourceRoot":""}