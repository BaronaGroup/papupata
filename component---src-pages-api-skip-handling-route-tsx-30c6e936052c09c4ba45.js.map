{"version":3,"sources":["webpack://papupata-docs/./src/components/IncludeAvailableFromContext.tsx","webpack://papupata-docs/./src/components/VersionVariants.tsx","webpack://papupata-docs/./src/components/api-components.tsx","webpack://papupata-docs/./src/components/guides.tsx","webpack://papupata-docs/./src/pages/api/skipHandlingRoute.tsx"],"names":["IncludeAvailableFromContext","React","Container","styled","Note","VersionVariants","variants","isRecommendation","useState","selectedVersion","setSelectedVersion","updateSelectedVersion","useCallback","e","target","value","onChange","Object","keys","filter","variant","version","isApplicable","map","key","Section","SectionHeading","SubHeading","ExampleCommonContainer","Purpose","children","AvailableFrom","Usage","Parameters","includeAvailableFrom","label","Parameter","name","dataType","availableFrom","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","NameColumn","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","Overview","Level0","Level1","GuideContent","content","child","style","marginLeft","level","anchor","href","heading","Heading","id","FixedFont","SkipHandlingRoute"],"mappings":"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","file":"component---src-pages-api-skip-handling-route-tsx-30c6e936052c09c4ba45.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import React, { ReactNode, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nexport type VariantVersion = '*' | SelectableVersion\ntype SelectableVersion = '1.x' | '2.x'\n\ninterface Props {\n  isRecommendation?: boolean\n  variants: {\n    [K in VariantVersion]?: ReactNode\n  }\n}\n\nconst Container = styled.div`\n  border-left: 4px solid #663399;\n  padding: 5px 0 5px 10px;\n`\n\nconst Note = styled.div`\n  display: inline-block;\n  margin-left: 10px;\n  font-size: 0.9em;\n`\n\nexport default function VersionVariants({ variants, isRecommendation }: Props) {\n  const [selectedVersion, setSelectedVersion] = useState<SelectableVersion>('2.x')\n  const updateSelectedVersion = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedVersion(e.target.value as any)\n  }, [])\n\n  return (\n    <Container>\n      <select value={selectedVersion} onChange={updateSelectedVersion}>\n        <option value=\"1.x\">Papupata 1.x</option>\n        <option value=\"2.x\">Papupata 2.x</option>\n      </select>\n      {isRecommendation && <Note>Older styles are still supported in later versions, just not preferred.</Note>}\n      {(Object.keys(variants) as VariantVersion[])\n        .filter((variant) => isApplicable(selectedVersion, variant))\n        .map((variant) => (\n          <div key={variant}>{variants[variant]}</div>\n        ))}\n    </Container>\n  )\n}\n\nfunction isApplicable(version: SelectableVersion, variant: VariantVersion) {\n  if (variant === '*') return true\n  return variant === version\n}\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n\nexport const Usage: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Caveats: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Examples: React.FC<{ children: any }> = ({ children }) => (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1 = styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map((child) => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map((child) => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: 'Consolas', 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace;\n`\n","import '../../prepare'\nimport React from 'react'\nimport { Example, Examples, Purpose, AvailableFrom, Usage } from '../../components/api-components'\nimport Container from '../../components/Container'\nimport { FixedFont } from '../../components/guides'\nimport Page from '../../components/Page'\nimport VersionVariants from '../../components/VersionVariants'\nimport IndexLayout from '../../layouts'\n\nexport default function SkipHandlingRoute() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>API Reference</h1>\n          <h2>skipHandlingRoute</h2>\n        </Container>\n        <Example>{`import {skipHandlingRoute} from 'papupata'`}</Example>\n        <AvailableFrom version=\"1.5.0\" />\n        <Purpose>\n          A token value a route implementation or papupata middleware can return to have express move on to the other route handlers and\n          middleware.\n        </Purpose>\n        <Usage>\n          <p>Most people will no need this, but there are a few use cases where this functionality can be useful.</p>\n          <p>\n            If routing needs are such, that there can be false positives for the route implementation, then this value can be used to defer\n            the execution to other handlers. A common case would be serving HTML if the client expects it, and only running the API call\n            itself for calls that have, say, Accept header requesting JSON.\n          </p>\n          <VersionVariants\n            variants={{\n              '1.x': (\n                <p>\n                  Another case would be when autoImplementAllAPIs is enabled, but you cannot actually implement all the APIs with papupata.\n                  Perhaps you need a pecualiar combination of middleware that make it more difficult, maybe you even want to defer to\n                  another papupata router. Or perhaps the route is implemented by a library. In these cases you can implement the route as\n                  one that always returns skipHandlingRoute to indicate that other code is responsible for it.\n                </p>\n              ),\n              '2.x': (\n                <p>\n                  Another case would be when autoImplementAllAPIs is enabled (which it is by default), but you cannot actually implement all\n                  the APIs with papupata. Perhaps you need a pecualiar combination of middleware that make it more difficult, maybe you even\n                  want to defer to another papupata router. Or perhaps the route is implemented by a library. In these cases you can\n                  implement the route as one that always returns skipHandlingRoute to indicate that other code is responsible for it.\n                  Alternatively you can declare the API with the <FixedFont>disableAutoImplement</FixedFont> option set to true, but that\n                  does leak an implementation detail to the declarations.\n                </p>\n              )\n            }}\n          />\n        </Usage>\n        <Examples>\n          <Example label=\"Conditional skip\">{`\n                api.implement(req => {\n                    if (req.headers.accept.includes('text/html')) return skipHandlingRoute\n                    return processRequest(req)\n                })\n            `}</Example>\n          <Example label=\"Defer execution to non-papupata implementation\">{`\n                const api = API.declareGetAPI('/test').response<string>()\n                api.implement(() => skipHandlingRoute)\n                app.get('/test', (_req, res) => res.send('OK!'))\n            `}</Example>\n        </Examples>\n      </Page>\n    </IndexLayout>\n  )\n}\n"],"sourceRoot":""}