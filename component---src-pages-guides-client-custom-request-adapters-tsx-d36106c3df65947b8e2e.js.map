{"version":3,"sources":["webpack://papupata-docs/./src/components/IncludeAvailableFromContext.tsx","webpack://papupata-docs/./src/components/api-components.tsx","webpack://papupata-docs/./src/components/guides.tsx","webpack://papupata-docs/./src/pages/guides/client/customRequestAdapters.tsx"],"names":["IncludeAvailableFromContext","React","Section","styled","SectionHeading","SubHeading","ExampleCommonContainer","Purpose","children","AvailableFrom","version","Usage","Parameters","includeAvailableFrom","label","value","Parameter","name","dataType","availableFrom","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","NameColumn","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","Overview","Level0","Level1","GuideContent","content","map","child","style","marginLeft","level","key","anchor","href","heading","Heading","id","FixedFont"],"mappings":"wJAEaA,E,QAA8BC,eAAoB,I,4cCGlDC,EAAUC,aAAH,sBACPC,EAAiBD,QAAH,sBACdE,EAAaF,QAAH,sBACVG,EAAyBH,aAAH,2EAKtBI,EAAoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC7B,QAACN,EAAD,MACE,QAACE,EAAD,gBACCI,IAKMC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACzB,QAACR,EAAD,MACE,QAACE,EAAD,qBADF,yDAEyDM,EAFzD,cAMSC,EAAkB,SAAC,GAAD,IAAGH,EAAH,EAAGA,SAAH,OAC3B,QAACN,EAAD,MACE,QAACE,EAAD,cACCI,IAGMI,EAA2E,SAAC,GAAD,IAAGJ,EAAH,EAAGA,SAAUK,EAAb,EAAaA,qBAAsBC,EAAnC,EAAmCA,MAAnC,OACpF,QAACZ,EAAD,MACE,QAAC,aAAD,CAAsCa,QAASF,IAC7C,QAACT,EAAD,kBAA2BU,GAAK,KAASA,GACxCN,GACC,sBACE,sBACE,mBACE,2BACA,2BACA,iCACCK,IAAwB,sCAG7B,qBAAQL,KAGV,gDAMGQ,EAAsF,SAAC,GAK7F,IAJLR,EAII,EAJJA,SACAS,EAGI,EAHJA,KACAC,EAEI,EAFJA,SAEI,IADJC,qBACI,MADY,QACZ,EACEN,EAAuBZ,aAAiBD,KAC9C,OACE,mBACE,kBAAKiB,IACL,kBAAKC,IACL,kBAAKV,GACJK,IAAwB,kBAAKM,KAKvBC,EAA6B,SAAC,GAAD,IAAGZ,EAAH,EAAGA,SAAH,OACtC,QAACN,EAAD,MACE,QAACE,EAAD,gBACCI,IAIMa,EAAoB,SAAC,GAAD,IAAGb,EAAH,EAAGA,SAAH,OAC7B,QAACN,EAAD,MACE,QAACE,EAAD,gBACCI,IAGMc,EAAwC,SAAC,GAAD,IAAGd,EAAH,EAAGA,SAAH,OACjD,QAACN,EAAD,MACE,QAACE,EAAD,iBACCI,IAIMe,EAA0D,SAAC,GAAD,IAAGf,EAAH,EAAGA,SAAUM,EAAb,EAAaA,MAAb,OACnE,wBACGA,IAAS,QAACT,EAAD,KAAaS,IACvB,QAAC,IAAD,CAAMU,SAAU,cAAehB,KAIxBiB,EAA6C,SAAC,GAAD,IAAGjB,EAAH,EAAGA,SAAH,OACtD,QAACF,EAAD,MACE,QAACD,EAAD,kCACCG,IAIMkB,EAAoF,SAAC,GAAD,IAAGlB,EAAH,EAAGA,SAAUK,EAAb,EAAaA,qBAAb,OAC7F,QAACX,EAAD,MACE,QAACE,EAAD,0BACA,QAAC,aAAD,CAAsCW,QAASF,IAC7C,QAACT,EAAD,mBACCI,GACC,sBACE,sBACE,mBACE,2BACA,oCACA,iCACCK,GAAuB,mCAAyB,MAGrD,qBAAQL,KAGV,gDAMJmB,EAAMxB,QAAH,sBACHyB,EAAazB,QAAH,sBACV0B,EAAqB1B,QAAH,sBAClB2B,EAAoB3B,QAAH,sBACjB4B,EAAsB5B,QAAH,sBAEZ6B,EAA2F,SAAC,GAKlG,IAJLxB,EAII,EAJJA,SACAS,EAGI,EAHJA,KACAgB,EAEI,EAFJA,aAEI,IADJd,qBACI,MADY,OACZ,EACEN,EAAuBZ,aAAiBD,KAC9C,OACE,QAAC2B,EAAD,MACE,QAACC,EAAD,KAAaX,IACb,QAACY,EAAD,KAAqBI,IACrB,QAACH,EAAD,KAAoBtB,GACnBK,GAAuB,QAACkB,EAAD,KAAsBZ,GAAuC,M,8KClJpF,SAASe,EAAT,GAA0D,IAAtC1B,EAAqC,EAArCA,SACzB,OACE,QAAC,KAAD,MACE,QAAC,KAAD,iBACCA,GAYP,IAAM2B,EAAShC,QAAH,sBACNiC,EAASjC,QAAH,6CAIL,SAASkC,EAAT,GAA8D,IAAtCC,EAAqC,EAArCA,QAC7B,OACE,oBACE,QAAC,KAAD,MACE,QAAC,KAAD,2BACA,kBACGA,EAAQC,KAAI,SAACC,GAAD,OACX,cAAIC,MAAO,CAAEC,WAAY,IAAMF,EAAMG,OAAS,IAAMC,IAAKJ,EAAMK,SAC7D,aAAGC,KAAI,IAAMN,EAAMK,QAAWL,EAAMO,eAK3CT,EAAQC,KAAI,SAACC,GACZ,IAAMQ,EAAWR,EAAMG,MAAiBP,EAATD,EAC/B,OACE,QAAC,KAAD,CAASc,GAAIT,EAAMK,OAAQD,IAAKJ,EAAMK,SACpC,QAACG,EAAD,KAAUR,EAAMO,SACfP,EAAMF,aAQZ,IAAMY,EAAY/C,UAAH,oH,wHC+FtB,UA1IkB,kBAChB,QAAC,IAAD,MACE,QAAC,IAAD,MACE,QAAC,IAAD,MACE,qDACA,QAAC,KAAD,8LAIA,QAAC,KAAD,CACEmC,QAAS,CACP,CACES,QAAS,aACTF,OAAQ,SACRP,SACE,yBACE,6NAIA,QAAC,KAAD,kaAWA,4JAIA,sBACE,sBACE,2BACA,oCAEF,sBACE,mBACE,6BACA,0QAMF,mBACE,0BACA,mBACE,wRAKA,+DAC4C,QAAC,KAAD,WAD5C,wDAIA,QAAC,KAAD,yKAOJ,mBACE,4BACA,4RAGyC,QAAC,KAAD,WAHzC,eAG6E,QAAC,KAAD,gBAH7E,OAMF,mBACE,2BACA,iNAE2E,QAAC,KAAD,uBAF3E,2PAQF,mBACE,6BACA,0WAMF,mBACE,0BACA,yNAKF,mBACE,qCACA,0HAOZ,CACES,QAAS,iBACTF,OAAQ,SACRP,SACE,yBACE,oLAON,CACES,QAAS,WACTF,OAAQ,WACRP,SACE,yBACE","file":"component---src-pages-guides-client-custom-request-adapters-tsx-d36106c3df65947b8e2e.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n\nexport const Usage: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Caveats: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Examples: React.FC<{ children: any }> = ({ children }) => (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1 = styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map((child) => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map((child) => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: 'Consolas', 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace;\n`\n","import '../../../prepare'\nimport * as React from 'react'\nimport { Example } from '../../../components/api-components'\nimport Container from '../../../components/Container'\nimport { FixedFont, GuideContent, Overview } from '../../../components/guides'\nimport Page from '../../../components/Page'\nimport IndexLayout from '../../../layouts'\n\nconst IndexPage = () => (\n  <IndexLayout>\n    <Page>\n      <Container>\n        <h1>Guide: custom request adapters</h1>\n        <Overview>\n          Making API calls with papupata happens using request adapters. The built-in ones are naive and limited, so you probably want to\n          create one that fits whatever requirements you have.\n        </Overview>\n        <GuideContent\n          content={[\n            {\n              heading: 'The basics',\n              anchor: 'basics',\n              content: (\n                <>\n                  <p>\n                    A request adapter is a function, which receives a bunch of parameters and is expected to return a promise that resolves\n                    with the value returned by the API. Now, let's start with the type declaration.\n                  </p>\n                  <Example>{`\n                    export type MakeRequestAdapter<RequestOptions = void> = (\n                      method: string,\n                      url: string,\n                      query: any,\n                      body: any,\n                      params: any,\n                      api: any,\n                      requestOptions?: RequestOptions\n                    ) => Promise<any>\n                    `}</Example>\n                  <p>\n                    In the table below you'll find listed typical uses for each of the parameters, from the point of view of making typical\n                    HTTP requests.\n                  </p>\n                  <table>\n                    <thead>\n                      <th>Name</th>\n                      <th>Typical uses</th>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>method</td>\n                        <td>\n                          This is the HTTP method the request is meant to be made with, in lowercase letters. You'll want to supply it to\n                          the library you use for actually making the requests. It can also be useful for determining if you should include\n                          the body or not.\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>url</td>\n                        <td>\n                          <p>\n                            This is the URL to the API, with path parameters already baked in, but without query parameters. Depending on\n                            your library you might want to add the query parameters to it before passing it along to your request library,\n                            or perhaps you can use the URL as is.\n                          </p>\n                          <p>\n                            If you do want to add the parameters, the <FixedFont>qs</FixedFont> library is a useful library for getting that\n                            done.\n                          </p>\n                          <Example>{`\n                            import qs from 'qs'\n\n                            const finalURL = url + '?' + qs.stringify(query)\n                          `}</Example>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>query</td>\n                        <td>\n                          This is a javascript object that has keys for query parameter names and values are the query parameter values.\n                          You'll want to pass this data along with the request, either baking it into the URL or passing the data to your\n                          library in some other way, such as the <FixedFont>qs</FixedFont> option of <FixedFont>request</FixedFont>.\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>body</td>\n                        <td>\n                          This is the body that is to be sent with the request. No serialization or other manipulation has been done before\n                          it arrives to this function, so if your library requires, say, you to do <FixedFont>JSON.stringify</FixedFont> on\n                          objects then you'll want to do that before passing it along. Typically this will be an object, or undefined if\n                          there is no data for the body, though as papupata supports other types of bodies as well it can end up being\n                          pretty much any type.\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>params</td>\n                        <td>\n                          Typically you won't need to use this parameter, as all of the path parameters have already been baked in to URL.\n                          On rare occasions you might want to make some decisions based on the path parameter values, so it is provided for\n                          completeness. The format is a javascript object that has keys for path parameter names and values their values.\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>api</td>\n                        <td>\n                          This is the API being invoked. This is especially useful if you have route options and wish to access them for\n                          making the request, for, say, determining if authentication needs to be performed.\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>requestOptions</td>\n                        <td>If you have specified options to be passed for making requests, this is where you'll find them.</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </>\n              )\n            },\n            {\n              heading: 'Error handling',\n              anchor: 'errors',\n              content: (\n                <>\n                  <p>\n                    At this time papupata does no take error handling into account. Any exceptions thrown in the adapter will be catchable\n                    wherever the call to the API was made.\n                  </p>\n                </>\n              )\n            },\n            {\n              heading: 'Examples',\n              anchor: 'examples',\n              content: (\n                <>\n                  <p>WIP</p>\n                </>\n              )\n            }\n          ]}\n        />\n      </Container>\n    </Page>\n  </IndexLayout>\n)\n\nexport default IndexPage\n"],"sourceRoot":""}