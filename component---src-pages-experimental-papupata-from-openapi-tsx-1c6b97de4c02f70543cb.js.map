{"version":3,"sources":["webpack://papupata-docs/./src/components/Banner.ts","webpack://papupata-docs/./src/components/IncludeAvailableFromContext.tsx","webpack://papupata-docs/./src/components/api-components.tsx","webpack://papupata-docs/./src/components/guides.tsx","webpack://papupata-docs/./src/components/MightChange.tsx","webpack://papupata-docs/./src/pages/experimental/papupata-from-openapi.tsx"],"names":["Banner","styled","IncludeAvailableFromContext","React","Section","SectionHeading","SubHeading","ExampleCommonContainer","Purpose","children","AvailableFrom","version","Usage","Parameters","includeAvailableFrom","label","value","Parameter","name","dataType","availableFrom","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","NameColumn","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","Overview","Level0","Level1","GuideContent","content","map","child","style","marginLeft","level","key","anchor","href","heading","Heading","id","FixedFont","Container","MightChange","PapupataFromOpenapi","Page"],"mappings":"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","file":"component---src-pages-experimental-papupata-from-openapi-tsx-1c6b97de4c02f70543cb.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Banner = styled.div`\n  border: 2px dotted transparent;\n  padding: 10px;\n  outline: 5px solid transparent;\n`\n","import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n\nexport const Usage: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Caveats: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Examples: React.FC<{ children: any }> = ({ children }) => (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1 = styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map((child) => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map((child) => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: 'Consolas', 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Banner } from './Banner'\n\nconst Container = styled(Banner)`\n  border-color: yellowgreen;\n  background-color: #ffd892;\n  outline-color: #ffd892;\n  margin: 20px;\n`\n\nexport const MightChange: React.FC = ({ children }) => <Container>{children || 'Beware! There is a good chance this will be changed before 1.0 release!'}</Container>\n","import Page from '../../components/Page'\nimport Container from '../../components/Container'\nimport { GuideContent, Overview } from '../../components/guides'\nimport IndexLayout from '../../layouts'\nimport * as React from 'react'\nimport { Example, Examples, Parameter, Parameters } from '../../components/api-components'\nimport { MightChange } from '../../components/MightChange'\n\nexport default function PapupataFromOpenapi() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>Conversion from OpenAPI</h1>\n          <Overview>\n            It is not an uncommon need to utilise APIs declared with OpenAPI, or even to implement them. An experimental tool exists for\n            generating papupata API declarations from an OpenAPI 3 document.\n          </Overview>\n          <MightChange>This is an experimental tool, its functionality is lacking and they way it is used might still change!</MightChange>\n          <GuideContent\n            content={[\n              {\n                heading: 'Getting Started',\n                anchor: 'getting-started',\n                content: (\n                  <>\n                    The tool is provided as a package called \"papupata-from-openapi\". You can install it into your repository if you want\n                    more control over the version of it being used, or you can run it directly with npx.\n                    <Examples>\n                      <Example>{`npm install papupata-from-openapi`}</Example>\n                      <Example>{`npx papupata-from-openapi`}</Example>\n                    </Examples>\n                    For programmatic usage, installing it is of course the way to go.\n                  </>\n                )\n              },\n              {\n                heading: 'Command-line',\n                anchor: 'cli',\n                content: (\n                  <>\n                    <Example>{`npx papupata-from-openapi`}</Example>\n                    <Example>{`npx papupata-from-openapi [--config=<configfile>]`}</Example>\n                    <Example>{`npx papupata-from-openapi <openapi> [<output>] [--exportName=<name>] `}</Example>\n                    <Parameters>\n                      <Parameter name={'config'} dataType={'filename'}>\n                        If given, the referenced file is used as the config file for papupata-from-openapi. If not given, and there are no\n                        other command line parameters a config is searched for from the current directory and its ancestors.\n                      </Parameter>\n                      <Parameter name={'openapi'} dataType={'filename/URL'}>\n                        Reference to an OpenAPI document to convert, either as a filename or an URL. Has no effect when config file is used.\n                      </Parameter>\n                      <Parameter name={'output'} dataType={'filename'}>\n                        The filename where the converted API declaration is to be stored. If omitted, it is printed to standard output. Has\n                        no effect when config file is used.\n                      </Parameter>\n                      <Parameter name={'exportName'} dataType={'string'}>\n                        The name used for the export of API declarations in the generated file. Has no effect when config file is used.\n                      </Parameter>\n                    </Parameters>\n                  </>\n                )\n              },\n              {\n                heading: 'Configuration',\n                anchor: 'config',\n                content: (\n                  <>\n                    <p>\n                      Configuration can be done using either command-line parameters, or using a config file. You can specify a config file\n                      using the command-line parameter --config. If you do not, and the command line does not indicate a conversion, a\n                      config file is automatically searched for.\n                    </p>\n                    <p>\n                      The search starts from the current directory, and goes towards the root directory until it finds a configuration file,\n                      or concludes that it cannot.\n                    </p>\n                    <p>\n                      The configuration file can be called either .papupata-from-openapi.js or .papupata-from-openapi.json. A .js file\n                      should be valid javascript the current version of node can execute, and it should export the configuration itself. The\n                      JSON file should just contain the configuration.\n                    </p>\n                    <p>The configuration itself should be an array of all the conversions that are to take place.</p>\n                    <Example>{`\n                      [\n                        {\n                          \"openapiLocation\": \"https://example.com/openapi.yaml\",\n                          \"outputTo\": \"./relative/api.ts\",\n                          \"exportName\": \"exampleAPI\"\n                        }\n                      ]\n                    `}</Example>\n                    <p>Each entry has the following fields:</p>\n                    <Parameters>\n                      <Parameter name={'openapiLocation'} dataType={'filename/URL'}>\n                        Reference to an OpenAPI document to convert, either as a filename or an URL.\n                      </Parameter>\n                      <Parameter name={'outputTo'} dataType={'filename'}>\n                        The filename where the converted API declaration is to be stored. no effect when config file is used.\n                      </Parameter>\n                      <Parameter name={'exportName'} dataType={'string'}>\n                        The name used for the export of API declarations in the generated file.\n                      </Parameter>\n                    </Parameters>\n                    <p>All relative paths are resolved relative to the configuration file.</p>\n                  </>\n                )\n              },\n\n              {\n                heading: 'API',\n                anchor: 'api',\n                content: <>At this time no documented API is provided. One will be added in future releases.</>\n              },\n              {\n                heading: 'Limitations',\n                anchor: 'config',\n                content: (\n                  <>\n                    <ul>\n                      <li>At this time only OpenAPI 3 documents are supported</li>\n                      <li>There are no doubt numerous improvements that could be done to the schema-to-typescript conversion</li>\n                      <li>Recursive references are not supported</li>\n                    </ul>\n                  </>\n                )\n              }\n            ]}\n          />\n        </Container>\n      </Page>\n    </IndexLayout>\n  )\n}\n"],"sourceRoot":""}