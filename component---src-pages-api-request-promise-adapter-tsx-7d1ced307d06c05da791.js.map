{"version":3,"sources":["webpack://papupata-docs/./src/components/Banner.ts","webpack://papupata-docs/./src/components/IncludeAvailableFromContext.tsx","webpack://papupata-docs/./src/components/ToDo.tsx","webpack://papupata-docs/./src/components/VersionVariants.tsx","webpack://papupata-docs/./src/components/api-components.tsx","webpack://papupata-docs/./src/pages/api/requestPromiseAdapter.tsx"],"names":["Banner","styled","IncludeAvailableFromContext","React","Container","ToDo","children","Note","VersionVariants","variants","isRecommendation","useState","selectedVersion","setSelectedVersion","updateSelectedVersion","useCallback","e","target","value","onChange","Object","keys","filter","variant","version","isApplicable","map","key","Section","SectionHeading","SubHeading","ExampleCommonContainer","Purpose","AvailableFrom","Usage","Parameters","includeAvailableFrom","label","Parameter","name","dataType","availableFrom","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","NameColumn","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","RequestPromiseAdapter"],"mappings":"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","file":"component---src-pages-api-request-promise-adapter-tsx-7d1ced307d06c05da791.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Banner = styled.div`\n  border: 2px dotted transparent;\n  padding: 10px;\n  outline: 5px solid transparent;\n`\n","import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Banner } from './Banner'\n\nconst Container = styled(Banner)`\n  border-color: yellowgreen;\n  background-color: #ffffa7;\n  outline-color: #ffffa7;\n  margin: 20px;\n`\n\nexport const ToDo: React.FC = ({ children }) => <Container>{children || 'This section needs more work.'}</Container>\n","import React, { ReactNode, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nexport type VariantVersion = '*' | SelectableVersion\ntype SelectableVersion = '1.x' | '2.x'\n\ninterface Props {\n  isRecommendation?: boolean\n  variants: {\n    [K in VariantVersion]?: ReactNode\n  }\n}\n\nconst Container = styled.div`\n  border-left: 4px solid #663399;\n  padding: 5px 0 5px 10px;\n`\n\nconst Note = styled.div`\n  display: inline-block;\n  margin-left: 10px;\n  font-size: 0.9em;\n`\n\nexport default function VersionVariants({ variants, isRecommendation }: Props) {\n  const [selectedVersion, setSelectedVersion] = useState<SelectableVersion>('2.x')\n  const updateSelectedVersion = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedVersion(e.target.value as any)\n  }, [])\n\n  return (\n    <Container>\n      <select value={selectedVersion} onChange={updateSelectedVersion}>\n        <option value=\"1.x\">Papupata 1.x</option>\n        <option value=\"2.x\">Papupata 2.x</option>\n      </select>\n      {isRecommendation && <Note>Older styles are still supported in later versions, just not preferred.</Note>}\n      {(Object.keys(variants) as VariantVersion[])\n        .filter((variant) => isApplicable(selectedVersion, variant))\n        .map((variant) => (\n          <div key={variant}>{variants[variant]}</div>\n        ))}\n    </Container>\n  )\n}\n\nfunction isApplicable(version: SelectableVersion, variant: VariantVersion) {\n  if (variant === '*') return true\n  return variant === version\n}\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n\nexport const Usage: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Caveats: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Examples: React.FC<{ children: any }> = ({ children }) => (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import '../../prepare'\nimport React from 'react'\nimport IndexLayout from '../../layouts'\nimport Page from '../../components/Page'\nimport Container from '../../components/Container'\nimport { Example, Examples, Purpose } from '../../components/api-components'\nimport { ToDo } from '../../components/ToDo'\nimport VersionVariants from '../../components/VersionVariants'\n\nexport default function RequestPromiseAdapter() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>API Reference</h1>\n          <h2>requestPromiseAdapter</h2>\n        </Container>\n        <VersionVariants\n          variants={{\n            '1.x': <Example>{`import createRequestAdapter from 'papupata/dist/main/requestPromiseAdapter'`}</Example>,\n            '2.x': <Example>{`import createRequestAdapter from 'papupata/adapters/requestPromise'`}</Example>\n          }}\n        />\n        <Purpose>An adapter that utilizes request-promise to invoke APIs</Purpose>\n        <ToDo>\n          <p>\n            The adapter is not properly documented, and is not of all that high quality as it is and it makes various non-general\n            assumptions. It should serve to give you some ideas on how a proper fetch adapter might be implemented, though.\n          </p>\n        </ToDo>\n      </Page>\n      <Examples>\n        <VersionVariants\n          isRecommendation\n          variants={{\n            '1.x': (\n              <Example>\n                {`\n                  const API = new APIDeclaration()\n                  API.configure({\n                    baseURL: '',\n                    makeRequest: createRequestAdapter('json')\n                  })\n                `}\n              </Example>\n            ),\n            '2.x': (\n              <Example>\n                {`\n                  const API = new APIDeclaration()\n                  API.configure({\n                    baseURL: '',\n                    requestAdapter: createRequestAdapter('json')\n                  })\n                `}\n              </Example>\n            )\n          }}\n        />\n      </Examples>\n    </IndexLayout>\n  )\n}\n"],"sourceRoot":""}