{"version":3,"sources":["webpack:///./src/pages/api/IncompleteAPIDeclaration/params.tsx","webpack:///./src/components/links.tsx"],"names":["Params","name","dataType","label","IncompleteApiDeclarationLink","to","DeclaredAPILink"],"mappings":"2FAAA,uGAMe,SAASA,IACtB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,uCACA,wDACA,wCAEF,YAAC,IAAD,gDACA,YAAC,IAAD,KACE,+EACA,+LAKF,YAAC,IAAD,KACE,YAAC,IAAD,CAAWC,KAAK,SAASC,SAAS,sBAChC,sIACA,2NAMJ,YAAC,IAAD,KACE,YAAC,IAAD,OAEF,YAAC,IAAD,KACE,YAAC,IAAD,CAASC,MAAM,eAAf,mQAQA,YAAC,IAAD,CAASA,MAAM,uBAAf,uHAMA,YAAC,IAAD,CAASA,MAAM,2BAAf,4N,iCClDV,4FAGO,SAASC,IACd,OAAO,YAAC,IAAD,CAAMC,GAAG,iCAAT,4BAGF,SAASC,IACd,OAAO,YAAC,IAAD,CAAMD,GAAG,oBAAT","file":"component---src-pages-api-incomplete-api-declaration-params-tsx-981a72f12cf162ae6826.js","sourcesContent":["import IndexLayout from '../../../layouts'\r\nimport Page from '../../../components/Page'\r\nimport Container from '../../../components/Container'\r\nimport { Purpose, Usage, Parameter, Parameters, MethodReturnType, Examples, Example } from '../../../components/api-components'\r\nimport { IncompleteApiDeclarationLink } from '../../../components/links'\r\n\r\nexport default function Params() {\r\n  return (\r\n    <IndexLayout>\r\n      <Page>\r\n        <Container>\r\n          <h1>API Reference</h1>\r\n          <h2>class IncompleteAPIDeclaration</h2>\r\n          <h3>method params</h3>\r\n        </Container>\r\n        <Purpose>Declares url/path parameters for an API</Purpose>\r\n        <Usage>\r\n          <p>If used, params must be declared before anything else.</p>\r\n          <p>\r\n            The corresponding parameters have to defined in the API path, with express you'd use :varName syntax for it. Optional path\r\n            parameters are not supported at this time.\r\n          </p>\r\n        </Usage>\r\n        <Parameters>\r\n          <Parameter name=\"params\" dataType=\"Const string array\">\r\n            <p>Names of the path parameters. See the example below for the recommended way to set up the const string array.</p>\r\n            <p>\r\n              At typescript level a regular string array is not treated as an error at declaration time, but using is NOT correct.\r\n              Unfortunately we have not come up with a way to prevent this kind of usage.\r\n            </p>\r\n          </Parameter>\r\n        </Parameters>\r\n        <MethodReturnType>\r\n          <IncompleteApiDeclarationLink />\r\n        </MethodReturnType>\r\n        <Examples>\r\n          <Example label=\"Declaration\">\r\n            {`\r\n            import { APIDeclaration } from 'papupata'\r\n            const api = new APIDeclaration()\r\n            const myAPI = api.declarePostAPI('/do-stuff/:param1/:param2')\r\n              .params(['param1', 'param2'] as const)             \r\n          `}\r\n          </Example>\r\n          <Example label=\"Usage in invocation\">\r\n            {`\r\n            await myAPI({param1: 'abc', param2: 'def'})\r\n            // Invokes URL /do-stuff/abc/def\r\n          `}\r\n          </Example>\r\n          <Example label=\"Usage in implementation\">\r\n            {`\r\n            await myAPI.implement(req => {\r\n              const {param1, param1} = req.params\r\n              return param1 + param1 // would return abcdef in the example\r\n            })            \r\n          `}\r\n          </Example>\r\n        </Examples>\r\n      </Page>\r\n    </IndexLayout>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nexport function IncompleteApiDeclarationLink() {\r\n  return <Link to=\"/api/IncompleteApiDeclaration\">IncompleteApiDeclaration</Link>\r\n}\r\n\r\nexport function DeclaredAPILink() {\r\n  return <Link to=\"/api/DeclaredAPI\">DeclaredAPI</Link>\r\n}\r\n"],"sourceRoot":""}