{"version":3,"sources":["webpack:///./src/components/IncludeAvailableFromContext.tsx","webpack:///./src/components/api-components.tsx","webpack:///./src/components/guides.tsx","webpack:///./src/pages/api/PartiallyDeclaredAPI/TypeMapping.tsx"],"names":["IncludeAvailableFromContext","React","Section","styled","section","SectionHeading","h4","SubHeading","h5","ExampleCommonContainer","Purpose","children","AvailableFrom","version","Usage","Parameters","includeAvailableFrom","label","Provider","value","Parameter","name","dataType","availableFrom","useContext","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","tr","NameColumn","td","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","Overview","Level0","Level1","GuideContent","content","map","child","style","marginLeft","level","key","anchor","href","heading","Heading","id","FixedFont","span","TypeMapping","to","NotApplicable"],"mappings":"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","file":"component---src-pages-api-partially-declared-api-type-mapping-tsx-ddd36b049e179866dae0.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => {\n  return (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n}\n\nexport const Usage: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\n}\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => {\n  return (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n}\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport const Caveats: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\n}\nexport const Examples: React.FC<{ children: any }> = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => {\n  return (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n}\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => {\n  return (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n}\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => {\n  return (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n}\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import './Page'\nimport './Container'\nimport '../layouts'\n\nimport React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1 = styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map((child) => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map((child) => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: 'Consolas', 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace;\n`\n","import { Link } from 'gatsby'\nimport React from 'react'\nimport { AvailableFrom, Example, Examples, Purpose, Usage } from '../../../components/api-components'\nimport Container from '../../../components/Container'\nimport { FixedFont } from '../../../components/guides'\nimport Page from '../../../components/Page'\nimport IndexLayout from '../../../layouts'\n\nexport default function TypeMapping() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>API Reference</h1>\n          <h2>class PartiallyDeclaredAPI</h2>\n          <h3>type TypeMapping</h3>\n        </Container>\n        <AvailableFrom version=\"2.0.0\" />\n        <Purpose>Representing the types of values.</Purpose>\n        <Usage>\n          <p>\n            These objects are used to provide types for query and path parameters, and from there they are also exposed via apiUrlParameters\n            field of a declared API.\n          </p>\n          <p>\n            TypeMapping is an object, that is essentially a collection of key-value pairs where the key stands for the name of the parameter\n            and the value stands for the type, and when applicable, any other constraints put on the field.\n          </p>\n          <p>\n            For additional information you might want to look at the <Link to=\"/guide/declaring/typeMapping\">TypeMapping guide</Link>\n          </p>\n          <Example>{`const typeMapping = { fieldName: String}`}</Example>\n        </Usage>\n\n        <h5>Valid types and constraints</h5>\n        <table>\n          <thead>\n            <tr>\n              <th>Value</th>\n              <th>Imported from</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>String</td>\n              <td>\n                <NotApplicable />\n              </td>\n              <td>Any string, not constraints.</td>\n            </tr>\n            <tr>\n              <td>StringMatching</td>\n              <td>\n                <Example>{`import { StringMatching } from 'papupata/queryTypes'`}</Example>\n              </td>\n              <td>\n                <p>\n                  A string that must match a given regular expression. Do note that the regex is NOT checked with typescript, so from its\n                  point of view any string will do.\n                </p>\n                <Example>{`const typeMapping = { fieldName: StringMatching(/^hello/) }`}</Example>\n                <p>\n                  It can be identified as being an object with a \"type\" field that has the value you can import as regexStringToken from\n                  papupata/queryTypes.\n                </p>\n              </td>\n            </tr>\n            <tr>\n              <td>StringEnum</td>\n              <td>\n                <Example>{`import { StringEnum } from 'papupata/queryTypes'`}</Example>\n              </td>\n              <td>\n                <p>\n                  A string that must be one of the provided options. Do note that the <FixedFont>as const</FixedFont> seen in the example is\n                  required in order to have typescript check the values being entered.\n                </p>\n                <Example>{`const typeMapping = { fieldName: StringEnum(['alpha', 'beta', 'gamma'] as const) }`}</Example>\n                <p>\n                  It can be identified as being an object with a \"type\" field that has the value you can import as stringEnumToken from\n                  papupata/queryTypes.\n                </p>\n              </td>\n            </tr>\n            <tr>\n              <td>Number</td>\n              <td>\n                <NotApplicable />\n              </td>\n              <td>Any number, negative numbers, decimal numbers, NaN and Infinity are all allowed.</td>\n            </tr>\n            <tr>\n              <td>Integer</td>\n              <td>\n                <Example>{`import { Integer } from 'papupata/queryTypes'`}</Example>\n              </td>\n              <td>\n                <p>\n                  An integer number. Negative number are allowed, Infinity and NaN are not. Do note that these constraints are NOT checked\n                  with typescript, so it appears to just accept a number.\n                </p>\n                <p>\n                  It can be identified as being an object with a \"type\" field that has the value you can import as integerToken from\n                  papupata/queryTypes.\n                </p>\n              </td>\n            </tr>\n            <tr>\n              <td>Boolean</td>\n              <td>\n                <NotApplicable />\n              </td>\n              <td>\n                Accepts the strings <FixedFont>true</FixedFont> and <FixedFont>false</FixedFont> to convert to their boolean counterparts.\n                Empty strings becomes false as well.\n              </td>\n            </tr>\n            <tr>\n              <td>Date</td>\n              <td>\n                <NotApplicable />\n              </td>\n              <td>The value of the parameter is passed to the constructor of Date to produce a date. Invalid dates are rejected.</td>\n            </tr>\n            <tr>\n              <td>Array</td>\n              <td>\n                <NotApplicable />\n              </td>\n              <td>\n                <p>\n                  An array of one entry that is one of the types specified above indicates an array of that type. Not applicable to path\n                  parameters. An array parameter is never strictly required -- it being missing results in an empty array.\n                </p>\n                <Example>{`const typeMapping = { fieldName: [String]} // an array of strings`}</Example>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <Examples>\n          <Example>\n            {`\n            import { APIDeclaration } from 'papupata'\n            import { StringMatching } from 'papupata/queryTypes'\n\n            const api = new APIDeclaration()\n            const myAPI = api.declarePostAPI('/do-stuff/:id')\n              .params({\n                id: StringMatching(/^[0-9a-f]{24}$/)\n              })\n              .query({\n                name: String,\n                age: Number\n              })\n              .optionalQuery({\n                wantsMarketingEmail: Boolean\n              })\n              .response<string>()\n          `}\n          </Example>\n        </Examples>\n      </Page>\n    </IndexLayout>\n  )\n}\n\nfunction NotApplicable() {\n  return <span>Not applicable</span>\n}\n"],"sourceRoot":""}