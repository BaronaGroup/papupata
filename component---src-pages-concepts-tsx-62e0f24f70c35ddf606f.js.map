{"version":3,"sources":["webpack://papupata-docs/./src/components/IncludeAvailableFromContext.tsx","webpack://papupata-docs/./src/components/api-components.tsx","webpack://papupata-docs/./src/components/guides.tsx","webpack://papupata-docs/./src/pages/concepts.tsx"],"names":["IncludeAvailableFromContext","React","Section","styled","SectionHeading","SubHeading","ExampleCommonContainer","Purpose","children","AvailableFrom","version","Usage","Parameters","includeAvailableFrom","label","value","Parameter","name","dataType","availableFrom","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","NameColumn","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","Overview","Level0","Level1","GuideContent","content","map","child","style","marginLeft","level","key","anchor","href","heading","Heading","id","FixedFont","Concept"],"mappings":"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","file":"component---src-pages-concepts-tsx-62e0f24f70c35ddf606f.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n\nexport const Usage: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Caveats: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Examples: React.FC<{ children: any }> = ({ children }) => (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1 = styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map((child) => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map((child) => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: 'Consolas', 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace;\n`\n","import '../prepare'\n\nimport * as React from 'react'\nimport { Example, Section, SectionHeading } from '../components/api-components'\nimport Container from '../components/Container'\nimport { FixedFont } from '../components/guides'\nimport Page from '../components/Page'\nimport IndexLayout from '../layouts'\n\nconst Concept: React.FC<{ children: React.ReactNode; label: React.ReactNode }> = ({ children, label }) => (\n    <Section>\n      <SectionHeading>{label}</SectionHeading>\n      <div>{children}</div>\n    </Section>\n  )\n\nconst ConceptsPage = () => (\n  <IndexLayout>\n    <Page>\n      <Container>\n        <h1>Concepts and terms</h1>\n        <p>This document covers terminology used throughout the rest of the documentation.</p>\n        <Concept label=\"API\">An HTTP endpoint.</Concept>\n        <Concept label=\"API Declaration\">\n          <p>An API declaration describes an HTTP endpoint, along with its payload and expected response.</p>\n          <p>\n            The <FixedFont>APIDeclaration</FixedFont> class in papupata allows for declaring APIs on the same host so that they share\n            configuration.\n          </p>\n        </Concept>\n        <Concept label=\"Middleware\">\n          One or more layers of code between and HTTP server and the business logic. Typically used for things like authentication,\n          authorization, logging and error handling.\n        </Concept>\n        <Concept label=\"Calling/invoking APIs\">The act of making an HTTP request, sending a payload and receiving response.</Concept>\n        <Concept label=\"Implementing APIs\">\n          The act of providing business logic connected to an HTTP server to process the inputs of an API to produce any necessary side\n          effects and a response.\n        </Concept>\n        <Concept label=\"Client\">\n          Any party that uses papupata to make HTTP requests. It is not necessarily a browser -- it is not uncommon for node processes to\n          make requests to external systems, in which case they are clients as well.\n        </Concept>\n        <Concept label=\"Server\">A HTTP (or HTTPs) server that forwards requests for papupata to handle.</Concept>\n        <Concept label=\"Request\">A call to an API. Initialized from the client and processed on the server.</Concept>\n\n        <Concept label=\"Mocking\">\n          Substituting production code and logic with another, typically simpler one for the purpose of testing.\n        </Concept>\n        <Concept label=\"express\">\n          A node.js library for implementing http server. See <a href=\"https://expressjs.com/\">https://expressjs.com/</a>. At this time\n          papupata natively supports only express as the http server for implementing APIs.\n        </Concept>\n        <Concept label=\"body, query parameter\">\n          Parts of an HTTP request. They along with path parameters are the payload for a request.\n        </Concept>\n        <Concept label=\"path parameter\">\n          <p>A parametrized part of the path in URLs. For example, in</p>\n          <Example>{`\n            API.declareGetAPI('/get/document/:id')/*...*/\n          `}</Example>\n          <p>\n            the <FixedFont>:id</FixedFont> signifies a path parameter, and is replaced with the value for the parameter when invoking the\n            API.\n          </p>\n        </Concept>\n      </Container>\n    </Page>\n  </IndexLayout>\n)\n\nexport default ConceptsPage\n"],"sourceRoot":""}