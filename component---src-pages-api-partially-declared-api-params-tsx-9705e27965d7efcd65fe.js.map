{"version":3,"sources":["webpack://papupata-docs/./src/components/IncludeAvailableFromContext.tsx","webpack://papupata-docs/./src/components/TypeMappingLink.tsx","webpack://papupata-docs/./src/components/VersionVariants.tsx","webpack://papupata-docs/./src/components/api-components.tsx","webpack://papupata-docs/./src/components/links.tsx","webpack://papupata-docs/./src/pages/api/PartiallyDeclaredAPI/params.tsx"],"names":["IncludeAvailableFromContext","React","TypeMappingLink","to","Container","styled","Note","VersionVariants","variants","isRecommendation","useState","selectedVersion","setSelectedVersion","updateSelectedVersion","useCallback","e","target","value","onChange","Object","keys","filter","variant","version","isApplicable","map","key","Section","SectionHeading","SubHeading","ExampleCommonContainer","Purpose","children","AvailableFrom","Usage","Parameters","includeAvailableFrom","label","Parameter","name","dataType","availableFrom","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","NameColumn","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","IncompleteApiDeclarationLink","DeclaredAPILink","Params"],"mappings":"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","file":"component---src-pages-api-partially-declared-api-params-tsx-9705e27965d7efcd65fe.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import { Link } from \"gatsby\";\nimport React from \"react\";\n\nexport default function TypeMappingLink() {\n  return <Link to=\"/api/PartiallyDeclaredAPI/TypeMapping\">TypeMapping</Link>\n}\n","import React, { ReactNode, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nexport type VariantVersion = '*' | SelectableVersion\ntype SelectableVersion = '1.x' | '2.x'\n\ninterface Props {\n  isRecommendation?: boolean\n  variants: {\n    [K in VariantVersion]?: ReactNode\n  }\n}\n\nconst Container = styled.div`\n  border-left: 4px solid #663399;\n  padding: 5px 0 5px 10px;\n`\n\nconst Note = styled.div`\n  display: inline-block;\n  margin-left: 10px;\n  font-size: 0.9em;\n`\n\nexport default function VersionVariants({ variants, isRecommendation }: Props) {\n  const [selectedVersion, setSelectedVersion] = useState<SelectableVersion>('2.x')\n  const updateSelectedVersion = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedVersion(e.target.value as any)\n  }, [])\n\n  return (\n    <Container>\n      <select value={selectedVersion} onChange={updateSelectedVersion}>\n        <option value=\"1.x\">Papupata 1.x</option>\n        <option value=\"2.x\">Papupata 2.x</option>\n      </select>\n      {isRecommendation && <Note>Older styles are still supported in later versions, just not preferred.</Note>}\n      {(Object.keys(variants) as VariantVersion[])\n        .filter((variant) => isApplicable(selectedVersion, variant))\n        .map((variant) => (\n          <div key={variant}>{variants[variant]}</div>\n        ))}\n    </Container>\n  )\n}\n\nfunction isApplicable(version: SelectableVersion, variant: VariantVersion) {\n  if (variant === '*') return true\n  return variant === version\n}\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n\nexport const Usage: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Caveats: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Examples: React.FC<{ children: any }> = ({ children }) => (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nexport function IncompleteApiDeclarationLink() {\n  return <Link to=\"/api/PartiallyDeclaredAPI\">PartiallyDeclaredAPI</Link>\n}\n\nexport function DeclaredAPILink() {\n  return <Link to=\"/api/DeclaredAPI\">DeclaredAPI</Link>\n}\n","import '../../../prepare'\nimport IndexLayout from '../../../layouts'\nimport Page from '../../../components/Page'\nimport Container from '../../../components/Container'\nimport { Purpose, Usage, Parameter, Parameters, MethodReturnType, Examples, Example } from '../../../components/api-components'\nimport { IncompleteApiDeclarationLink } from '../../../components/links'\nimport React from 'react'\nimport VersionVariants from '../../../components/VersionVariants'\nimport TypeMappingLink from '../../../components/TypeMappingLink'\n\nexport default function Params() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>API Reference</h1>\n          <h2>class IncompleteAPIDeclaration</h2>\n          <h3>method params</h3>\n        </Container>\n        <Purpose>Declares url/path parameters for an API</Purpose>\n        <Usage>\n          <p>If used, params must be declared before anything else.</p>\n          <p>\n            The corresponding parameters have to defined in the API path, with express you'd use :varName syntax for it. Optional path\n            parameters are not supported at this time.\n          </p>\n        </Usage>\n        <VersionVariants\n          isRecommendation\n          variants={{\n            '1.x': (\n              <>\n                <Parameters>\n                  <Parameter name=\"params\" dataType=\"Const string array\">\n                    <p>Names of the path parameters. See the example below for the recommended way to set up the const string array.</p>\n                    <p>\n                      At typescript level a regular string array is not treated as an error at declaration time, but using is NOT correct.\n                      Unfortunately we have not come up with a way to prevent this kind of usage.\n                    </p>\n                  </Parameter>\n                </Parameters>\n                <MethodReturnType>\n                  <IncompleteApiDeclarationLink />\n                </MethodReturnType>\n                <Examples>\n                  <Example label=\"Declaration\">\n                    {`\n                      import { APIDeclaration } from 'papupata'\n                      const api = new APIDeclaration()\n                      const myAPI = api.declarePostAPI('/do-stuff/:param1/:param2')\n                        .params(['param1', 'param2'] as const)\n                    `}\n                  </Example>\n                  <Example label=\"Usage in invocation\">\n                    {`\n                      await myAPI({param1: 'abc', param2: 'def'})\n                      // Invokes URL /do-stuff/abc/def\n                    `}\n                  </Example>\n                  <Example label=\"Usage in implementation\">\n                    {`\n                      myAPI.implement(req => {\n                        const {param1, param1} = req.params\n                        return param1 + param1 // would return abcdef in the example\n                      })\n                    `}\n                  </Example>\n                </Examples>\n              </>\n            ),\n            '2.x': (\n              <>\n                <Parameters>\n                  <Parameter name=\"params\" dataType={<TypeMappingLink />}>\n                    Names and types of the path parameters, as an object. See the examples and the TypeMapping itself for more information.\n                  </Parameter>\n                </Parameters>\n                <MethodReturnType>\n                  <IncompleteApiDeclarationLink />\n                </MethodReturnType>\n                <Examples>\n                  <Example label=\"Declaration\">\n                    {`\n                      import { APIDeclaration } from 'papupata'\n                      const api = new APIDeclaration()\n                      const myAPI = api.declarePostAPI('/do-stuff/:param1/:param2')\n                        .params({param1: String, param2: Number})\n                    `}\n                  </Example>\n                  <Example label=\"Usage in invocation\">\n                    {`\n                      await myAPI({param1: 'abc', param2: 100})\n                      // Invokes URL /do-stuff/abc/100\n                    `}\n                  </Example>\n                  <Example label=\"Usage in implementation\">\n                    {`\n                      myAPI.implement(req => {\n                        const {param1, param2} = req.params\n                        return param1 + param2 // would return abc100 in the example, with param2 actually being a number\n                      })\n                    `}\n                  </Example>\n                </Examples>\n              </>\n            )\n          }}\n        />\n      </Page>\n    </IndexLayout>\n  )\n}\n"],"sourceRoot":""}