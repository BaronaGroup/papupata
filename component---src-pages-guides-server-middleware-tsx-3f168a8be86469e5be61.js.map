{"version":3,"sources":["webpack://papupata-docs/./src/components/IncludeAvailableFromContext.tsx","webpack://papupata-docs/./src/components/VersionVariants.tsx","webpack://papupata-docs/./src/components/api-components.tsx","webpack://papupata-docs/./src/components/guides.tsx","webpack://papupata-docs/./src/pages/guides/server/middleware.tsx"],"names":["IncludeAvailableFromContext","React","Container","styled","Note","VersionVariants","variants","isRecommendation","useState","selectedVersion","setSelectedVersion","updateSelectedVersion","useCallback","e","target","value","onChange","Object","keys","filter","variant","version","isApplicable","map","key","Section","SectionHeading","SubHeading","ExampleCommonContainer","Purpose","children","AvailableFrom","Usage","Parameters","includeAvailableFrom","label","Parameter","name","dataType","availableFrom","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","NameColumn","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","Overview","Level0","Level1","GuideContent","content","child","style","marginLeft","level","anchor","href","heading","Heading","id","FixedFont"],"mappings":"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","file":"component---src-pages-guides-server-middleware-tsx-3f168a8be86469e5be61.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import React, { ReactNode, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nexport type VariantVersion = '*' | SelectableVersion\ntype SelectableVersion = '1.x' | '2.x'\n\ninterface Props {\n  isRecommendation?: boolean\n  variants: {\n    [K in VariantVersion]?: ReactNode\n  }\n}\n\nconst Container = styled.div`\n  border-left: 4px solid #663399;\n  padding: 5px 0 5px 10px;\n`\n\nconst Note = styled.div`\n  display: inline-block;\n  margin-left: 10px;\n  font-size: 0.9em;\n`\n\nexport default function VersionVariants({ variants, isRecommendation }: Props) {\n  const [selectedVersion, setSelectedVersion] = useState<SelectableVersion>('2.x')\n  const updateSelectedVersion = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedVersion(e.target.value as any)\n  }, [])\n\n  return (\n    <Container>\n      <select value={selectedVersion} onChange={updateSelectedVersion}>\n        <option value=\"1.x\">Papupata 1.x</option>\n        <option value=\"2.x\">Papupata 2.x</option>\n      </select>\n      {isRecommendation && <Note>Older styles are still supported in later versions, just not preferred.</Note>}\n      {(Object.keys(variants) as VariantVersion[])\n        .filter((variant) => isApplicable(selectedVersion, variant))\n        .map((variant) => (\n          <div key={variant}>{variants[variant]}</div>\n        ))}\n    </Container>\n  )\n}\n\nfunction isApplicable(version: SelectableVersion, variant: VariantVersion) {\n  if (variant === '*') return true\n  return variant === version\n}\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n\nexport const Usage: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Caveats: React.FC = ({ children }) => (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\nexport const Examples: React.FC<{ children: any }> = ({ children }) => (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport { Section, SectionHeading } from './api-components'\nimport styled from 'styled-components'\n\nexport function Overview({ children }: { children: ReactNode }) {\n  return (\n    <Section>\n      <SectionHeading>Overview</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\ninterface GuidePart {\n  heading: ReactNode\n  anchor: string\n  content: ReactNode\n  level?: number\n}\n\nconst Level0 = styled.h4``\nconst Level1 = styled.h5`\n  font-size: 1.1em;\n`\n\nexport function GuideContent({ content }: { content: GuidePart[] }) {\n  return (\n    <div>\n      <Section>\n        <SectionHeading>Table of contents</SectionHeading>\n        <ul>\n          {content.map((child) => (\n            <li style={{ marginLeft: 18 * (child.level || 0) }} key={child.anchor}>\n              <a href={`#${child.anchor}`}>{child.heading}</a>\n            </li>\n          ))}\n        </ul>\n      </Section>\n      {content.map((child) => {\n        const Heading = !child.level ? Level0 : Level1\n        return (\n          <Section id={child.anchor} key={child.anchor}>\n            <Heading>{child.heading}</Heading>\n            {child.content}\n          </Section>\n        )\n      })}\n    </div>\n  )\n}\n\nexport const FixedFont = styled.span`\n  font-family: 'Consolas', 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace;\n`\n","import '../../../prepare'\nimport * as React from 'react'\n\nimport Page from '../../../components/Page'\nimport Container from '../../../components/Container'\nimport IndexLayout from '../../../layouts'\nimport { FixedFont, GuideContent, Overview } from '../../../components/guides'\nimport { Example } from '../../../components/api-components'\nimport VersionVariants from '../../../components/VersionVariants'\n\nconst IndexPage = () => (\n  <IndexLayout>\n    <Page>\n      <Container>\n        <h1>Guide: middleware</h1>\n        <Overview>\n          Middleware provides powerful additional functionality to how APIs behave. This guide goes through how middleware is used and\n          created.\n        </Overview>\n        <GuideContent\n          content={[\n            {\n              heading: 'What is middleware?',\n              anchor: 'whatis',\n              content: (\n                <>\n                  <p>\n                    Much like express middleware, papupata middleware exists to separate common functionality needed by APIs from the actual\n                    API implementations.\n                  </p>\n                  <p>There are two types of middleware:</p>\n                  <ul>\n                    <li>\n                      Middleware inherent to an API declaration, which is applied to all of the declared APIs. This could be called global\n                      middleware, but since it only applies to a single API declaration it could be misleading.\n                    </li>\n                    <li>API-specific middleware, which is only applied when explicitly requested.</li>\n                  </ul>\n                  <p>The middleware generally speaking do one or all of the following things:</p>\n                  <ul>\n                    <li>Manipulate the request before passing it along to the API implementation</li>\n                    <li>Preventing the API from being called under specific circumstances</li>\n                    <li>Manipulate the output of an API</li>\n                    <li>Add a side-effect to an API being invoked</li>\n                  </ul>\n                </>\n              )\n            },\n            {\n              heading: 'Using middleware',\n              anchor: 'using',\n              content: (\n                <>\n                  <p>\n                    Both inherent and route-specific middleware is given in an array. The order of the elements matters: inherent middleware\n                    is always processed before route-specific middleware, and within the array all middleware are processed in the same\n                    order as they exist in the array. This can be important if, say, one middleware adds data to request another middleware\n                    depends on, or if you want to block the execution of the middleware as well based on a condition.\n                  </p>\n                  <p>Configuring inherent middleware: </p>\n                  <VersionVariants\n                    isRecommendation\n                    variants={{\n                      '1.x': (\n                        <Example>\n                          {`\n                          API.configure({\n                            ...API.getConfig(),\n                            inherentMiddleware: [myMiddleware1, myMiddleware1]\n                          })`}\n                        </Example>\n                      ),\n                      '2.x': (\n                        <Example>\n                          {`\n                          API.updateConfig({\n                            inherentMiddleware: [myMiddleware1, myMiddleware1]\n                          })`}\n                        </Example>\n                      )\n                    }}\n                  />\n\n                  <p>Configuring middleware for a single route: </p>\n                  <Example>{`\n                    const myAPI = API.declareGetAPI('/test').response<string>()\n\n                    myAPI.implementWithPapupataMiddleware([myMiddleware1, myMiddleware1], implementation)\n                  `}</Example>\n                  <p>\n                    You can use express middleware with papupata, see more in the <a href=\"#express\">express section of this guide</a>.\n                  </p>\n                </>\n              )\n            },\n            {\n              heading: 'The most basic middleware',\n              anchor: 'basic',\n              content: (\n                <>\n                  <p>Let's start by creating a middleware that simply logs the URLs being invoked.</p>\n                  <Example>{`\n                import {PapupataMiddleware} from 'papupata'\n                import {Request} from 'express'\n                const myMiddleware: PapupataMiddleware<Request, void> = (req, res, api, next) => {\n                    console.log('Handling', req.url)\n                    return next()\n                }\n                `}</Example>\n                  <p>\n                    The main difference between express and papupata middleware is that while express middleware forms a list, papupata\n                    middleware are more like koa middleware in that there is a call stack, or a pyramid where each middleware can be a part\n                    of both the request and the response. The important thing for most middleware is to return the value returned by calling{' '}\n                    <FixedFont>next()</FixedFont> instead ignoring it.\n                  </p>\n                  <p>Errors are handled by throwing exceptions.</p>\n                </>\n              )\n            },\n            {\n              heading: 'Manipulating request',\n              anchor: 'request',\n              content: (\n                <>\n                  <p>In theory manipulating the request is just changing data in it.</p>\n                  <Example>{`\n                const myMiddleware: PapupataMiddleware<Request, void> = (req, res, api, next) => {\n                    if (req.body?.userId === 'self') {\n                        req.body.userId = req.session.userId\n                    }\n                    return next()\n                }\n                `}</Example>\n                  <p>\n                    Typescript does make some kinds of changes more difficult. If you want to add custom fields, you probably want to extend\n                    the <FixedFont>request</FixedFont> interface to contain whatever you are adding.\n                  </p>\n                  <p>\n                    Sometimes though these modifications might only be relevant for single papupata API declarations and you don't want to\n                    change the global request interface. For this reason papupata supports changing the request type to something other than\n                    the default.\n                  </p>\n                  <Example>{`\n                  interface MyRequest extends Request {\n                    myField: string\n                  }\n\n                  const API = new APIDeclaration<MyRequest>()\n\n                   const myMiddleware: PapupataMiddleware<MyRequest, void> = (req, res, api, next) => {\n                    if (req.body?.userId === 'self') {\n                        req.body.userId = req.session.userId\n                    }\n                    return next()\n                }\n                  `}</Example>\n                  <p>\n                    In the example both the implementations and middleware on API use the MyRequest instead of the normal Request type for\n                    the request parameter.\n                  </p>\n                </>\n              )\n            },\n            {\n              heading: 'Abandoning the request',\n              anchor: 'abandoning',\n              content: (\n                <>\n                  <p>\n                    Sometimes middleware needs to prevent the actual implemementation from being called. There are multiple way to do this\n                    depending on what your goal is. There is always one thing in common though: you don'd call next.\n                  </p>\n                  <ul>\n                    <li>\n                      Return a value. It then becomes the response instead of what the implementation would have provided\n                      <Example>{`\n                    const myMiddleware: PapupataMiddleware<MyRequest, void> = (req, res, api, next) => {\n                      if (!req.headers.accept?.includes('application/json')) {\n                          res.status(400)\n                          return 'Bad headers'\n                      }\n                      return next()\n                    }\n                    `}</Example>\n                    </li>\n                    <li>\n                      Throw an error to do normal error handling\n                      <Example>{`\n                    const myMiddleware: PapupataMiddleware<MyRequest, void> = (req, res, api, next) => {\n                      if (!req.headers.accept?.includes('application/json')) {\n                          throw new Error('Bad headers')\n                      }\n                      return next()\n                    }\n                    `}</Example>\n                    </li>\n                    <li>\n                      Explicitly send a response using the methods on <FixedFont>res</FixedFont>. This prevents other middleware from being\n                      able to affect the response.\n                      <Example>{`\n                    const myMiddleware: PapupataMiddleware<MyRequest, void> = (req, res, api, next) => {\n                      if (!req.headers.accept?.includes('application/json')) {\n                          res.status(400)\n                          res.send('Bad request: Invalid headers')\n                          return\n                      }\n                      return next()\n                    }\n                    `}</Example>\n                    </li>\n                    <li>\n                      Return <FixedFont>skipHandlingRoute</FixedFont> to have express resume routing and middleware processing with other\n                      APIs.\n                      <Example>{`\n                    import {skipHandlingRoute} from 'papupata'\n                    const myMiddleware: PapupataMiddleware<MyRequest, void> = (req, res, api, next) => {\n                      if (!req.headers.accept?.includes('application/json')) {\n                          return skipHandlingRoute\n                      }\n                      return next()\n                    }\n                    `}</Example>\n                    </li>\n                  </ul>\n                </>\n              )\n            },\n            {\n              heading: 'Manipulating response',\n              anchor: 'response',\n              content: (\n                <>\n                  <p>\n                    Normally a middleware gets the response data by doing <FixedFont>await next()</FixedFont>, and it can then do whatever\n                    manipulation it desires. Some APIs can send the response directly though, in which case this is not true, so you should\n                    try and be prepared for it.\n                  </p>\n                  <Example>{`\n                    const myMiddleware: PapupataMiddleware<MyRequest, void> = async (req, res, api, next) => {\n                      const value = await next()\n                      if (!res.headersSent) {\n                        res.status(204)\n                        return value ?? 'No data'\n                      }\n                      return value\n                    }\n                  `}</Example>\n                </>\n              )\n            },\n            {\n              heading: 'Route options',\n              anchor: 'options',\n              content: (\n                <>\n                  <p>\n                    It'd be really convenient to give middleware some metadata about a route. Is unauthenticated access permitted? Does it\n                    handle unusual payloads? Papupata allows exactly that.\n                  </p>\n                  <p>\n                    When you create an API declaration you can provide an interface that provides options to routes, and provide a value of\n                    that type to the APIs.\n                  </p>\n                  <Example>{`\n                  import {Request} from 'express'\n                  interface Options { publicAccess: boolean }\n                  const API = new APIDeclaration<Request, Options>()\n                  const myAPI = API.declareGetAPI('/api/ping', {publicAccess: true}).response<string>()\n                `}</Example>\n                  <p>This value can then be accessed by middleware.</p>\n                  <Example>{`\n                    const myMiddleware: PapupataMiddleware<Request, Options> = async (req, res, api, next) => {\n                      if (!api.options?.publicAccess && !req.session.isValid) {\n                        throw new Error('Authentication required')\n                      }\n                      return next()\n                    }\n                `}</Example>\n                </>\n              )\n            },\n            {\n              heading: 'Error handling',\n              anchor: 'errors',\n              content: (\n                <>\n                  <p>You can use middleware to add custom error handling.</p>\n                  <Example>{`\n                    const myMiddleware: PapupataMiddleware<Request, Options> = async (req, res, api, next) => {\n                      try {\n                        return await next()\n                      } catch(err) {\n                        res.status(err.status || 400)\n                        return err.message\n                      }\n                    }\n                `}</Example>\n                </>\n              )\n            },\n            {\n              heading: 'Express middleware',\n              anchor: 'express',\n              content: (\n                <>\n                  <p>\n                    Individual routes can be given express middleware in addition to papupata middleware. If you do that, the express\n                    middleware is run before the papupata middleware is -- even the inherent middleware.\n                  </p>\n                  <Example>{`\n                myAPI.implementWithExpressMiddleware([expressMiddleware], implement)\n                myAPI.implementWithMiddleware({express: [expressMiddleware]}, implement)\n                `}</Example>\n                  <p>\n                    A generally preferable option is to convert express middleware into papupata middleware;{' '}\n                    <FixedFont>convertExpressMiddleware</FixedFont> is exported by papupata to do that. At this time it does not handle\n                    express middleware that handle errors, but other middleware should be convertable.\n                  </p>\n                  <Example>{`\n                  import {convertExpressMiddleware} from 'papupata'\n                  myAPI.implementWithPapupataMiddleware([convertExpressMiddleware(expressMiddleware)], implement)\n                  `}</Example>\n                </>\n              )\n            }\n          ]}\n        />\n      </Container>\n    </Page>\n  </IndexLayout>\n)\n\nexport default IndexPage\n"],"sourceRoot":""}