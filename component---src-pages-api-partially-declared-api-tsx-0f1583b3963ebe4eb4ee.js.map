{"version":3,"sources":["webpack:///./src/pages/api/PartiallyDeclaredAPI.tsx","webpack:///./src/components/links.tsx","webpack:///./src/components/members-table.tsx","webpack:///./node_modules/core-js/modules/es6.string.link.js","webpack:///./src/components/Banner.ts","webpack:///./src/components/MightChange.tsx"],"names":["IncompleteApiDeclaration","context","name","dataType","IncompleteApiDeclarationLink","to","DeclaredAPILink","Row","styled","tr","NameColumnBase","td","TypeColumn","DataTypeColumn","DescriptionColumn","RequiredColumnStyles","AvailableFromColumn","RequiredColumn","children","includeRequiredColumn","useContext","MemberContext","Error","createContext","NameColumn","Members","includeAvailableFrom","Provider","value","MethodMember","required","displayName","availableFrom","React","IncludeAvailableFromContext","PropertyMember","link","ExposedTypeMember","createHTML","url","this","Banner","div","Container","MightChange"],"mappings":"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","file":"component---src-pages-api-partially-declared-api-tsx-0f1583b3963ebe4eb4ee.js","sourcesContent":["import React from 'react'\r\nimport IndexLayout from '../../layouts'\r\nimport Page from '../../components/Page'\r\nimport Container from '../../components/Container'\r\nimport { Purpose, Usage, Examples, Example } from '../../components/api-components'\r\nimport { MethodMember, Members } from '../../components/members-table'\r\nimport { IncompleteApiDeclarationLink, DeclaredAPILink } from '../../components/links'\r\nimport { MightChange } from '../../components/MightChange'\r\n\r\nexport default function IncompleteApiDeclaration() {\r\n  return (\r\n    <IndexLayout>\r\n      <Page>\r\n        <Container>\r\n          <h1>API Reference</h1>\r\n          <h2>interface IncompleteApiDeclaration</h2>\r\n        </Container>\r\n        <Purpose>Used for defining the parameters and response types of an API.</Purpose>\r\n        <Usage>\r\n          <p>\r\n            Technically there is nothing called \"IncompleteApiDeclaration\" in the code base. This is simply a representation of what is\r\n            returned when declaring the API.\r\n          </p>\r\n          <p>\r\n            There is, out of necessity, a somewhat odd restriction. Although you can skip any parts you do not need, the method calls have\r\n            to take place in a specific order. This is necessary to avoid a combinatorial expolosion of types as the API is being declared.\r\n            Luckily Typescript is perfectly aware of which methods are available and when. In brief, the order of declarations must be\r\n            params, query, optional query, bool query, body and finally response.\r\n          </p>\r\n          <p>\r\n            The API declaration is done by invoking the methods exposed here in chain-like fashion. Once response is declared, you have a\r\n            fully declared API which can then be implemented or called.\r\n          </p>\r\n        </Usage>\r\n        <Members context=\"PartiallyDeclaredAPI\">\r\n          <MethodMember name=\"params\" dataType={<IncompleteApiDeclarationLink />}>\r\n            Declare URL/path parameters for the API.\r\n          </MethodMember>\r\n          <MethodMember name=\"query\" dataType={<IncompleteApiDeclarationLink />}>\r\n            Declare URL/path required string query parameters for the API.\r\n          </MethodMember>\r\n          <MethodMember name=\"optionalQuery\" dataType={<IncompleteApiDeclarationLink />}>\r\n            Declare URL/path optional query parameters for the API.\r\n          </MethodMember>\r\n          <MethodMember name=\"queryBool\" dataType={<IncompleteApiDeclarationLink />}>\r\n            <MightChange />\r\n            Declare URL/path optional query parameters for the API.\r\n          </MethodMember>\r\n          <MethodMember name=\"body\" dataType={<IncompleteApiDeclarationLink />}>\r\n            Declare body type. At this time the body must be an object.\r\n          </MethodMember>\r\n          <MethodMember name=\"response\" dataType={<DeclaredAPILink />}>\r\n            Declare response type and conclude the declaration of an API.\r\n          </MethodMember>\r\n        </Members>\r\n        <Examples>\r\n          <Example>{`\r\n            import { APIDeclaration } from 'papupata'\r\n            const api = new APIDeclaration()\r\n            const myAPI = api.declarePostAPI('/do-stuff/:pathParam')\r\n              .params(['pathParam'] as const)\r\n              .query(['queryParam'] as const)\r\n              .optionalQuery(['opt'] as const)\r\n              .queryBool(['boolValue'] as const)\r\n              .body<{name: string}>()\r\n              .response<string>()\r\n          `}</Example>\r\n        </Examples>\r\n      </Page>\r\n    </IndexLayout>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nexport function IncompleteApiDeclarationLink() {\r\n  return <Link to=\"/api/PartiallyDeclaredAPI\">PartiallyDeclaredAPI</Link>\r\n}\r\n\r\nexport function DeclaredAPILink() {\r\n  return <Link to=\"/api/DeclaredAPI\">DeclaredAPI</Link>\r\n}\r\n","import { Section, SectionHeading } from './api-components'\r\nimport React, { createContext, ReactNode, useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'gatsby'\r\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\r\n\r\nconst Row = styled.tr``\r\nconst NameColumnBase = styled.td``\r\nconst TypeColumn = styled.td``\r\nconst DataTypeColumn = styled.td``\r\nconst DescriptionColumn = styled.td``\r\nconst RequiredColumnStyles = styled.td``\r\nconst AvailableFromColumn = styled.td``\r\n\r\nfunction RequiredColumn({ children }: { children: ReactNode }) {\r\n  const { includeRequiredColumn } = useContext(MemberContext)\r\n  if (!includeRequiredColumn && children) throw new Error('Being asked to show required cell, yet it does not exist')\r\n  return includeRequiredColumn ? <RequiredColumnStyles>{children}</RequiredColumnStyles> : null\r\n}\r\n\r\nconst MemberContext = createContext({ context: '', includeRequiredColumn: false })\r\n\r\nconst NameColumn: React.FC<{ name: string }> = ({ name, children }) => {\r\n  const { context } = useContext(MemberContext)\r\n  return (\r\n    <NameColumnBase>\r\n      <Link to={`/api/${context}/${name}`}>{children || name}</Link>\r\n    </NameColumnBase>\r\n  )\r\n}\r\n\r\nexport const Members: React.FC<{ context: string; includeRequiredColumn?: boolean; includeAvailableFrom?: boolean }> = ({\r\n  children,\r\n  context,\r\n  includeRequiredColumn,\r\n  includeAvailableFrom\r\n}) => {\r\n  return (\r\n    <Section>\r\n      <MemberContext.Provider value={{ context, includeRequiredColumn: !!includeRequiredColumn }}>\r\n        <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\r\n          <SectionHeading>Members</SectionHeading>\r\n          <table>\r\n            <thead>\r\n              <th>Name</th>\r\n              <th>Type</th>\r\n              <th>Data type/return type</th>\r\n              <th>Description</th>\r\n              {includeRequiredColumn && <th>Required</th>}\r\n              {includeAvailableFrom && <th>Introduced in</th>}\r\n            </thead>\r\n            <tbody>{children}</tbody>\r\n          </table>\r\n        </IncludeAvailableFromContext.Provider>\r\n      </MemberContext.Provider>\r\n    </Section>\r\n  )\r\n}\r\nexport const MethodMember: React.FC<{ name: string; dataType: any; required?: any; displayName?: any; availableFrom?: string }> = ({\r\n  children,\r\n  name,\r\n  dataType,\r\n  required,\r\n  displayName,\r\n  availableFrom\r\n}) => {\r\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\r\n  return (\r\n    <Row>\r\n      <NameColumn name={name}>{displayName}</NameColumn>\r\n      <TypeColumn>method</TypeColumn>\r\n      <DataTypeColumn>{dataType}</DataTypeColumn>\r\n      <DescriptionColumn>{children}</DescriptionColumn>\r\n      <RequiredColumn>{required === true ? 'Yes' : required === false ? 'No' : required}</RequiredColumn>\r\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport const PropertyMember: React.FC<{ name: string; dataType: any; required?: any; availableFrom?: string; link?: boolean }> = ({\r\n  children,\r\n  name,\r\n  dataType,\r\n  required,\r\n  availableFrom,\r\n  link\r\n}) => {\r\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\r\n\r\n  return (\r\n    <Row>\r\n      {link ? <NameColumn name={name}>{name}</NameColumn> : <NameColumnBase>{name}</NameColumnBase>}\r\n      <TypeColumn>property</TypeColumn>\r\n      <DataTypeColumn>{dataType}</DataTypeColumn>\r\n      <DescriptionColumn>{children}</DescriptionColumn>\r\n      <RequiredColumn>{required === true ? 'Yes' : required === false ? 'No' : required}</RequiredColumn>\r\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport const ExposedTypeMember: React.FC<{ name: string }> = ({ children, name }) => {\r\n  return (\r\n    <Row>\r\n      <NameColumnBase>{name}</NameColumnBase>\r\n      <TypeColumn>property</TypeColumn>\r\n      <DataTypeColumn>n/a</DataTypeColumn>\r\n      <DescriptionColumn>{children}. Type type itself must be accessed using the typeof operator.</DescriptionColumn>\r\n    </Row>\r\n  )\r\n}\r\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n","import styled from 'styled-components'\r\n\r\nexport const Banner = styled.div`\r\n  border: 2px dotted transparent;\r\n  padding: 10px;\r\n  outline: 5px solid transparent;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Banner } from './Banner'\r\n\r\nconst Container = styled(Banner)`\r\n  border-color: yellowgreen;\r\n  background-color: #ffd892;\r\n  outline-color: #ffd892;\r\n  margin: 20px;\r\n`\r\n\r\nexport const MightChange: React.FC = ({ children }) => {\r\n  return <Container>{children || 'Beware! There is a good chance this will be changed before 1.0 release!'}</Container>\r\n}\r\n"],"sourceRoot":""}