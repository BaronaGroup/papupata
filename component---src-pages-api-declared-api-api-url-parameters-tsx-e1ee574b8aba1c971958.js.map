{"version":3,"sources":["webpack:///./src/components/IncludeAvailableFromContext.tsx","webpack:///./src/pages/api/DeclaredAPI/apiUrlParameters.tsx","webpack:///./src/components/TypeMappingLink.tsx","webpack:///./src/components/api-components.tsx","webpack:///./src/components/VersionVariants.tsx","webpack:///./src/components/members-table.tsx"],"names":["IncludeAvailableFromContext","React","ApiUrlParameters","version","variants","context","includeRequiredColumn","dataType","name","required","TypeMappingLink","to","Section","styled","section","SectionHeading","h4","SubHeading","h5","ExampleCommonContainer","Purpose","children","AvailableFrom","Usage","Parameters","includeAvailableFrom","label","Provider","value","Parameter","availableFrom","useContext","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","tr","NameColumn","td","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue","Container","div","Note","VersionVariants","isRecommendation","useState","selectedVersion","setSelectedVersion","updateSelectedVersion","useCallback","e","target","onChange","Object","keys","filter","variant","isApplicable","map","key","NameColumnBase","TypeColumn","DataTypeColumn","RequiredColumnStyles","RequiredColumn","MemberContext","Error","createContext","Members","MethodMember","displayName","PropertyMember","link","ExposedTypeMember"],"mappings":"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","file":"component---src-pages-api-declared-api-api-url-parameters-tsx-e1ee574b8aba1c971958.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import React from 'react'\nimport '../../../prepare'\n\nimport { AvailableFrom, Purpose } from '../../../components/api-components'\nimport Container from '../../../components/Container'\nimport { Members, PropertyMember } from '../../../components/members-table'\nimport Page from '../../../components/Page'\nimport TypeMappingLink from '../../../components/TypeMappingLink'\nimport VersionVariants from '../../../components/VersionVariants'\nimport IndexLayout from '../../../layouts'\n\nexport default function ApiUrlParameters() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>API Reference</h1>\n          <h2>class DeclaredAPI</h2>\n          <h3>property apiUrlParameters</h3>\n        </Container>\n        <AvailableFrom version=\"1.5.0\" />\n        <Purpose>Exposes the path and query parameters of the api</Purpose>\n        <VersionVariants\n          variants={{\n            '1.x': (\n              <Members context=\"DeclaredAPI/apiUrlParameters\" includeRequiredColumn={true}>\n                <PropertyMember dataType={'string[]'} name=\"params\" required=\"false\">\n                  Path parameters of the API\n                </PropertyMember>\n                <PropertyMember dataType={'string[]'} name=\"query\" required=\"false\">\n                  Regular query parameters of the API\n                </PropertyMember>\n                <PropertyMember dataType={'string[]'} name=\"optionalQuery\" required=\"false\">\n                  Optional query parameters of the API\n                </PropertyMember>\n                <PropertyMember dataType={'string[]'} name=\"boolQuery\" required=\"false\">\n                  Boolean query parameters of the API\n                </PropertyMember>\n              </Members>\n            ),\n            '2.x': (\n              <>\n                <Members context=\"DeclaredAPI/apiUrlParameters\" includeRequiredColumn={true}>\n                  <PropertyMember dataType={<TypeMappingLink />} name=\"params\" required=\"false\">\n                    Path parameters of the API\n                  </PropertyMember>\n                  <PropertyMember dataType={<TypeMappingLink />} name=\"query\" required=\"false\">\n                    Regular query parameters of the API\n                  </PropertyMember>\n                  <PropertyMember dataType={<TypeMappingLink />} name=\"optionalQuery\" required=\"false\">\n                    Optional query parameters of the API\n                  </PropertyMember>\n                  <PropertyMember dataType={<TypeMappingLink />} name=\"boolQuery\" required=\"false\">\n                    Boolean query parameters of the API\n                  </PropertyMember>\n                </Members>\n                <p>\n                  To get a list of fields similar to papupata 1.x you can use Object.keys on the TypeMappings, though do note that boolQuery\n                  is only populated if it is used explicitly, boolean values specified in normal query will be in query instead.\n                </p>\n              </>\n            )\n          }}\n        />\n      </Page>\n    </IndexLayout>\n  )\n}\n","import { Link } from \"gatsby\";\nimport React from \"react\";\n\nexport default function TypeMappingLink() {\n  return <Link to=\"/api/PartiallyDeclaredAPI/TypeMapping\">TypeMapping</Link>\n}\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0' | '2.0.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => {\n  return (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n}\n\nexport const Usage: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\n}\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => {\n  return (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n}\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport const Caveats: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\n}\nexport const Examples: React.FC<{ children: any }> = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => {\n  return (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n}\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => {\n  return (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n}\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => {\n  return (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n}\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n","import React, { ReactNode, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nexport type VariantVersion = '*' | SelectableVersion\ntype SelectableVersion = '1.x' | '2.x'\n\ninterface Props {\n  isRecommendation?: boolean\n  variants: {\n    [K in VariantVersion]?: ReactNode\n  }\n}\n\nconst Container = styled.div`\n  border-left: 4px solid #663399;\n  padding: 5px 0 5px 10px;\n`\n\nconst Note = styled.div`\n  display: inline-block;\n  margin-left: 10px;\n  font-size: 0.9em;\n`\n\nexport default function VersionVariants({ variants, isRecommendation }: Props) {\n  const [selectedVersion, setSelectedVersion] = useState<SelectableVersion>('2.x')\n  const updateSelectedVersion = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedVersion(e.target.value as any)\n  }, [])\n\n  return (\n    <Container>\n      <select value={selectedVersion} onChange={updateSelectedVersion}>\n        <option value=\"1.x\">Papupata 1.x</option>\n        <option value=\"2.x\">Papupata 2.x</option>\n      </select>\n      {isRecommendation && <Note>Older styles are still supported in later versions, just not preferred.</Note>}\n      {(Object.keys(variants) as VariantVersion[])\n        .filter((variant) => isApplicable(selectedVersion, variant))\n        .map((variant) => (\n          <div key={variant}>{variants[variant]}</div>\n        ))}\n    </Container>\n  )\n}\n\nfunction isApplicable(version: SelectableVersion, variant: VariantVersion) {\n  if (variant === '*') return true\n  return variant === version\n}\n","import { Section, SectionHeading } from './api-components'\nimport React, { createContext, ReactNode, useContext } from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nconst Row = styled.tr``\nconst NameColumnBase = styled.td``\nconst TypeColumn = styled.td``\nconst DataTypeColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst RequiredColumnStyles = styled.td``\nconst AvailableFromColumn = styled.td``\n\nfunction RequiredColumn({ children }: { children: ReactNode }) {\n  const { includeRequiredColumn } = useContext(MemberContext)\n  if (!includeRequiredColumn && children) throw new Error('Being asked to show required cell, yet it does not exist')\n  return includeRequiredColumn ? <RequiredColumnStyles>{children}</RequiredColumnStyles> : null\n}\n\nconst MemberContext = createContext({ context: '', includeRequiredColumn: false })\n\nconst NameColumn: React.FC<{ name: ReactNode }> = ({ name, children }) => {\n  const { context } = useContext(MemberContext)\n  return (\n    <NameColumnBase>\n      <Link to={`/api/${context}/${name}`}>{children || name}</Link>\n    </NameColumnBase>\n  )\n}\n\nexport const Members: React.FC<{ context: string; includeRequiredColumn?: boolean; includeAvailableFrom?: boolean }> = ({\n  children,\n  context,\n  includeRequiredColumn,\n  includeAvailableFrom\n}) => {\n  return (\n    <Section>\n      <MemberContext.Provider value={{ context, includeRequiredColumn: !!includeRequiredColumn }}>\n        <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n          <SectionHeading>Members</SectionHeading>\n          <table>\n            <thead>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Data type/return type</th>\n              <th>Description</th>\n              {includeRequiredColumn && <th>Required</th>}\n              {includeAvailableFrom && <th>Introduced in</th>}\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        </IncludeAvailableFromContext.Provider>\n      </MemberContext.Provider>\n    </Section>\n  )\n}\nexport const MethodMember: React.FC<{ name: string; dataType: any; required?: any; displayName?: any; availableFrom?: string }> = ({\n  children,\n  name,\n  dataType,\n  required,\n  displayName,\n  availableFrom\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn name={name}>{displayName}</NameColumn>\n      <TypeColumn>method</TypeColumn>\n      <DataTypeColumn>{dataType}</DataTypeColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      <RequiredColumn>{required === true ? 'Yes' : required === false ? 'No' : required}</RequiredColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n\nexport const PropertyMember: React.FC<{ name: ReactNode; dataType: any; required?: any; availableFrom?: string; link?: boolean }> = ({\n  children,\n  name,\n  dataType,\n  required,\n  availableFrom,\n  link\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n\n  return (\n    <Row>\n      {link ? <NameColumn name={name}>{name}</NameColumn> : <NameColumnBase>{name}</NameColumnBase>}\n      <TypeColumn>property</TypeColumn>\n      <DataTypeColumn>{dataType}</DataTypeColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      <RequiredColumn>{required === true ? 'Yes' : required === false ? 'No' : required}</RequiredColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n\nexport const ExposedTypeMember: React.FC<{ name: string }> = ({ children, name }) => {\n  return (\n    <Row>\n      <NameColumnBase>{name}</NameColumnBase>\n      <TypeColumn>property</TypeColumn>\n      <DataTypeColumn>n/a</DataTypeColumn>\n      <DescriptionColumn>{children}. Type type itself must be accessed using the typeof operator.</DescriptionColumn>\n    </Row>\n  )\n}\n"],"sourceRoot":""}