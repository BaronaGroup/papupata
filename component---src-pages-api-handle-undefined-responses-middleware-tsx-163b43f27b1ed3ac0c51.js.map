{"version":3,"sources":["webpack:///./src/components/IncludeAvailableFromContext.tsx","webpack:///./src/pages/api/handleUndefinedResponsesMiddleware.tsx","webpack:///./src/components/api-components.tsx"],"names":["IncludeAvailableFromContext","React","HandleUndefinedResponsesMiddleware","version","label","Section","styled","section","SectionHeading","h4","SubHeading","h5","ExampleCommonContainer","Purpose","children","AvailableFrom","Usage","Parameters","includeAvailableFrom","Provider","value","Parameter","name","dataType","availableFrom","useContext","MethodReturnType","Caveats","Examples","Example","language","ExampleCommon","TypeParameters","Row","tr","NameColumn","td","DefaultValueColumn","DescriptionColumn","AvailableFromColumn","TypeParameter","defaultValue"],"mappings":"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","file":"component---src-pages-api-handle-undefined-responses-middleware-tsx-163b43f27b1ed3ac0c51.js","sourcesContent":["import * as React from 'react'\n\nexport const IncludeAvailableFromContext = React.createContext(false)\n","import React from 'react'\nimport { Example, Examples, Purpose, AvailableFrom, Usage } from '../../components/api-components'\nimport Container from '../../components/Container'\nimport Page from '../../components/Page'\nimport IndexLayout from '../../layouts'\n\nexport default function HandleUndefinedResponsesMiddleware() {\n  return (\n    <IndexLayout>\n      <Page>\n        <Container>\n          <h1>API Reference</h1>\n          <h2>handleUndefinedResponsesMiddleware</h2>\n        </Container>\n        <Example>{`import {handleUndefinedResponsesMiddleware} from 'papupata'`}</Example>\n        <AvailableFrom version=\"1.5.0\" />\n        <Purpose>\n          Middleware that changes how papupata deals with undefined responses, automatically setting up response code 204 (if not otherwise\n          specified) and sending a response.\n        </Purpose>\n        <Usage>\n          <p>\n            By default papupata assumes that if your route implementation returns undefined, it takes the responsibilities for sending the\n            response.\n          </p>\n          <p>\n            This if often not the case, though. You might have APIs that do things but do not return anything, in which case it makes sense\n            for the response to be undefined or void. But what it means by default is that you have either do something like\n            <Example>{`res.status(204); res.end()`}</Example>\n            or return an empty string.\n          </p>\n          <p>\n            This middleware changes things in two ways; one: if headers have not been sent by the time the route implementation returns\n            undefined, an empty response is automatically sent. Also, in that case, if the response status code has not been explicitly set,\n            it becomes 204 (no content).\n          </p>\n          <p>The behaviour of this middleware might become the default mode of operation for papupata 2.0.</p>\n        </Usage>\n        <Examples>\n          <Example label=\"Enabling middleware for all roues\">{`\n                const API = new APIDeclaration()\n                API.configure({\n                  // other options\n                  inherentMiddleware: [handleUndefinedResponsesMiddleware]\n                })\n            `}</Example>\n          <Example label=\"Enabling the middleware for a single route\">{`\n                const api = API.declareGetAPI('/test').response<string>()\n                api.implementWithPapupataMiddleware([handleUndefinedResponsesMiddleware], () => skipHandlingRoute)\n            `}</Example>\n          <Example label=\"Expected effect: simple case\">{`\n            api.implement(async () => {\n              await doStuff()\n            })\n            // Without middleware there is never a response; with the middleware the response is a 204\n          `}</Example>\n          <Example label=\"Expected effect: explicit status\">{`\n            api.implement(async (_req, res) => {\n              res.status(500)\n              await doStuff()\n            })\n            // Without middleware there is never a response; with the middleware the response is a 500\n          `}</Example>\n          <Example label=\"Expected effect: redirect\">{`\n            api.implement(async (_req, res) => {\n              res.redirect('/')\n            })\n            // Works with and without middleware\n          `}</Example>\n        </Examples>\n      </Page>\n    </IndexLayout>\n  )\n}\n","import styled from 'styled-components'\nimport React, { ReactNode } from 'react'\nimport { Code } from './Code'\nimport { IncludeAvailableFromContext } from './IncludeAvailableFromContext'\n\nexport const Section = styled.section``\nexport const SectionHeading = styled.h4``\nexport const SubHeading = styled.h5``\nexport const ExampleCommonContainer = styled.section`\n  padding: 15px 30px;\n  background: lightyellow;\n`\n\nexport const Purpose: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Purpose</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport type ValidVersions = '1.1.0' | '1.2.0' | '1.5.0' | '1.8.0'\nexport const AvailableFrom = ({ version }: { version: ValidVersions }) => {\n  return (\n    <Section>\n      <SectionHeading>Availability</SectionHeading>\n      This functionality is available from papupata version {version} onwards.\n    </Section>\n  )\n}\n\nexport const Usage: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Usage</SectionHeading>\n      {children}\n    </Section>\n  )\n}\nexport const Parameters: React.FC<{ includeAvailableFrom?: boolean; label?: string }> = ({ children, includeAvailableFrom, label }) => {\n  return (\n    <Section>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters{label && `: ${label}`}</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Type</th>\n                <th>Description</th>\n                {includeAvailableFrom && <th>Introduced in</th>}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n}\n\nexport const Parameter: React.FC<{ name: string; dataType: any; availableFrom?: ValidVersions }> = ({\n  children,\n  name,\n  dataType,\n  availableFrom = '1.0.0'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <tr>\n      <td>{name}</td>\n      <td>{dataType}</td>\n      <td>{children}</td>\n      {includeAvailableFrom && <td>{availableFrom}</td>}\n    </tr>\n  )\n}\n\nexport const MethodReturnType: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Returns</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport const Caveats: React.FC = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Caveats</SectionHeading>\n      {children}\n    </Section>\n  )\n}\nexport const Examples: React.FC<{ children: any }> = ({ children }) => {\n  return (\n    <Section>\n      <SectionHeading>Examples</SectionHeading>\n      {children}\n    </Section>\n  )\n}\n\nexport const Example: React.FC<{ label?: string; children: string }> = ({ children, label }) => {\n  return (\n    <>\n      {label && <SubHeading>{label}</SubHeading>}\n      <Code language={'typescript'}>{children}</Code>\n    </>\n  )\n}\n\nexport const ExampleCommon: React.FC<{ children: any }> = ({ children }) => {\n  return (\n    <ExampleCommonContainer>\n      <SubHeading>Common to examples below:</SubHeading>\n      {children}\n    </ExampleCommonContainer>\n  )\n}\n\nexport const TypeParameters: React.FC<{ children: ReactNode; includeAvailableFrom?: boolean }> = ({ children, includeAvailableFrom }) => {\n  return (\n    <Section>\n      <SectionHeading>Type parameeters</SectionHeading>\n      <IncludeAvailableFromContext.Provider value={!!includeAvailableFrom}>\n        <SectionHeading>Parameters</SectionHeading>\n        {children ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Default value</th>\n                <th>Description</th>\n                {includeAvailableFrom ? <th>Introduced in</th> : ''}\n              </tr>\n            </thead>\n            <tbody>{children}</tbody>\n          </table>\n        ) : (\n          <p>There are no parameters.</p>\n        )}\n      </IncludeAvailableFromContext.Provider>\n    </Section>\n  )\n}\n\nconst Row = styled.tr``\nconst NameColumn = styled.td``\nconst DefaultValueColumn = styled.td``\nconst DescriptionColumn = styled.td``\nconst AvailableFromColumn = styled.td``\n\nexport const TypeParameter: React.FC<{ name: string; defaultValue?: string; availableFrom?: string }> = ({\n  children,\n  name,\n  defaultValue,\n  availableFrom = 'none'\n}) => {\n  const includeAvailableFrom = React.useContext(IncludeAvailableFromContext)\n  return (\n    <Row>\n      <NameColumn>{name}</NameColumn>\n      <DefaultValueColumn>{defaultValue}</DefaultValueColumn>\n      <DescriptionColumn>{children}</DescriptionColumn>\n      {includeAvailableFrom ? <AvailableFromColumn>{availableFrom}</AvailableFromColumn> : ''}\n    </Row>\n  )\n}\n"],"sourceRoot":""}